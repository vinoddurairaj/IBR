/*++
Module Name:

    LogMsg.h (generated by LogMsg.mc)

Abstract:

    This module contains the error strings for the event-logging system

Environment:

    Kernel\User mode

Revision History:

--*/

#ifndef _LOGMSG_H_
#define _LOGMSG_H_

//
//  Status values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-------------------------+-------------------------------+
//  |Sev|C|       Facility          |               Code            |
//  +---+-+-------------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//

//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_RPC_STUBS               0x3
#define FACILITY_RPC_RUNTIME             0x2
#define FACILITY_IO_ERROR_CODE           0x4
#define FACILITY_FTD_ERROR_CODE          0x7


//
// Define the severity codes
//
#define STATUS_SEVERITY_WARNING          0x2
#define STATUS_SEVERITY_SUCCESS          0x0
#define STATUS_SEVERITY_INFORMATIONAL    0x1
#define STATUS_SEVERITY_ERROR            0x3


//
// MessageId: FTD_SIMPLE_MESSAGE
//
// MessageText:
//
//  %1
//
#define FTD_SIMPLE_MESSAGE               ((LONG)0x60000001L)

//
// MessageId: FTD_SIMPLE_KERNEL_MESSAGE
//
// MessageText:
//
//  %2
//
#define FTD_SIMPLE_KERNEL_MESSAGE        ((LONG)0x60000002L)

//
// MessageId: FTD_SERVICE_NOT_RUNNING_ERROR
//
// MessageText:
//
//  The %1 service is not running.
//
#define FTD_SERVICE_NOT_RUNNING_ERROR    ((LONG)0xE0000003L)

//
//     Perfutil messages
//
//
// MessageId: FTD_PERF_CANT_READ_DATA
//
// MessageText:
//
//  Unable to read performance data from %1.
//
#define FTD_PERF_CANT_READ_DATA          ((LONG)0xE0000004L)

//
// MessageId: FTD_PERF_CANT_READ_FIRST_COUNTER
//
// MessageText:
//
//  Unable to read the "First Counter" value 
//  under the %1\Performance key.
//  Status code returned in data.
//
#define FTD_PERF_CANT_READ_FIRST_COUNTER ((LONG)0xE0000005L)

//
// MessageId: FTD_PERF_CANT_READ_FIRST_HELP
//
// MessageText:
//
//  Unable to read the "First Help" value 
//  under the %1\Performance key. 
//  Status code returned in data.
//
#define FTD_PERF_CANT_READ_FIRST_HELP    ((LONG)0xE0000006L)

//
// MessageId: FTD_PERF_OPEN_FILE_MAPPING_ERROR
//
// MessageText:
//
//  Unable to open mapped file containing %1 performance data.
//
#define FTD_PERF_OPEN_FILE_MAPPING_ERROR ((LONG)0xE0000007L)

//
// MessageId: FTD_PERF_UNABLE_MAP_VIEW_OF_FILE
//
// MessageText:
//
//  Unable to map to shared memory file containing %1 performance data.
//
#define FTD_PERF_UNABLE_MAP_VIEW_OF_FILE ((LONG)0xE0000008L)

//
// MessageId: FTD_PERF_UNABLE_OPEN_DRIVER_KEY
//
// MessageText:
//
//  Unable open "Performance" key of %1 Application in registy. 
//  Status code is returned in data.
//
#define FTD_PERF_UNABLE_OPEN_DRIVER_KEY  ((LONG)0xE0000009L)

#endif /* _LOGMSG_H_ */

