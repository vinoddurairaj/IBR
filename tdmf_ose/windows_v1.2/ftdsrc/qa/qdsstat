#! /usr/local/bin/perl5
eval 'exec perl -S $0 ${1+"$@"}'
        if $running_under_some_shell;

########################################
# Preliminaries
#
use Getopt::Std;

########################################
# Initialize constants
#
$QDSStatFileTmplt ='/var/opt/QLIXds/dsgrp%03d.prf';

$DFLT_Duration = 0;						# duration of run, in seconds; or 0 if no limit

########################################
# Process arguments
#
$scriptName = $0;
getopts('t:') || Usage();
$#ARGV == 0 || Usage();

########################################
# Initialize parameters
#
$duration				= ((defined $opt_t) ? $opt_t : $DFLT_Duration);

if ($duration == 0) {
	$forever = 1;
}
else {
	$forever = 0;
	$timeout = time + $duration;
}


########################################
# Validate parameters
#
($ARGV[0] =~ /^[0-9]+$/) || Usage();


########################################
# Get ready for our loop.
#
$QDSSTATFILE = sprintf($QDSStatFileTmplt, $ARGV[0]);

open(QDSSTATFILE, $QDSSTATFILE) || do {
	# We might have found the window of time during which the daemon is shuffling
	# the statistics file around.  Wait half-a-second and try again.  Failure this
	# time means death.
	#
	uSleep(500000);
	open(QDSSTATFILE, $QDSSTATFILE) || die "$QDSSTATFILE: Open failed: $!\n";
};

(($dev,$statFileInode) = stat(QDSSTATFILE)) || die "$QDSSTATFILE: stat failed: $!,";
seek(QDSSTATFILE, 0, 2); # seek to the end of the file


########################################
# Start the timing loop.
#
while ($forever || (time <= $timeout)) {
	PrintqdsStats();

	# Now take a nap for a second.
	#
	uSleep(500000);
}
close QDSSTATFILE;
exit 0;


##############################################################################
# Subroutines & Functions
#
sub PrintqdsStats {
	my($dev,$ino,$mode,$nlnk,$uid,$gid,$rdev,$sz);

	# The daemon may have closed the statistics file we've been looking at, renamed it,
	# and opened a new one.  If so, then the inode number that we have for the file will
	# be different than the one now associated with the name $QDSSTATFILE.
	#
	(($dev,$ino) = stat($QDSSTATFILE)) || do {
		# We might have found the window of time during which the daemon is shuffling
		# the statistics file around.  Wait half-a-second and try again.  Failure this
		# time means death.
		#
		print STDERR "Oops! Lost the stat file -- trying again.\n";
		uSleep(500000);
		(($dev,$ino) = stat($QDSSTATFILE)) || die "$deviceStatFile: stat failed: $!,";
	};

	if ($ino != $statFileInode) {
		# The statistics file changed on us: close the file we have and open the new one.
		#
		close(QDSSTATFILE) || die "What the...? Close of $QDSSTATFILE failed: $!, ";
		open(QDSSTATFILE, $QDSSTATFILE) || die "$QDSSTATFILE: Open failed: $!,";
		(($dev,$statFileInode) = stat(QDSSTATFILE)) || die "$QDSSTATFILE: stat failed: $!,";
	}

	# While there are more lines in the file...
	#
	while (<QDSSTATFILE>) {
		# Print the stat file line.  Someday we may get fancier, but for now...
		#
		print;
	}

	# Got to end-of-file. Do a seek to clear the EOF flag.
	seek(QDSSTATFILE, 0, 1);
}

sub Usage {
	printf "Usage: %s [options] <logical group number>\nOptions:\n", $scriptName;
	printf "\t-t<secs>:      run for <secs> seconds (default: forever)\n";
	die "\n";
}

sub uSleep {
	my($uSecs) = @_;
	select(undef, undef, undef, $uSecs / 1000000.0);
}
