#Copyright (c) 1998 FullTime Software, Inc.  All Rights Reserved.
#
# RESTRICTED RIGHTS LEGEND: Use, duplication, or disclosure by the
# Government is subject to restrictions as set forth in
# subparagraph (c)(1)(ii) of the Rights in Technical Data and
# Computer Software clause at DFARS 52.227-7013 and in similar
# clauses in the FAR and NASA FAR Supplement.
#
# $Id: Makefile.inc.Linux,v 1.26 2011/06/16 19:03:31 proulxm Exp $
#

CC     = $(shell which gcc)
STRIP  = /usr/bin/strip 
TAR    = /bin/tar
CSCOPE = $(shell which cscope)
EXPR   = $(shell which expr)
MKDIR  = $(shell which mkdir)
RANLIB = /usr/bin/ranlib

SOCKET_LIBS =
THREAD_LIB =  
KSTAT_LIB = -lkstat 
PLATFORMDEFINES = -Dlinux \
				  $(shell /usr/bin/getconf LFS_CFLAGS) \
				  -D_GNU_SOURCE \
				  -DNEED_SYS_MNTTAB \
				  -DNEED_BIGINTS \
				  -D__NO_LONG_DOUBLE_MATH

ifneq (,$(findstring 2.6,$(OSRELEASE)))
# At multiple locations within the code, the KERNEL_VERSION and LINUX_VERSION_CODE macros are used in order to decide,
# at compile time, if the product should behave accordingly to what's needed for a 2.4 or 2.6 version of Linux.

# The previous mechanism relied on obtaining the kernel version by direct inclusion on <linux/version.h>.
# This was problematic because the linux sources seen when compiling user space programs (installed under /usr/include/linux)
# have nothing to do with the kernel version we are running.

# For instance, RH4 releases run a 2.6 kernel, but install 2.4 kernel headers under /usr/include/linux.
# In order to build properly, we previously hade to manually modify every build machine's /usr/include/linux/version.h file
# to update it with a 2.6 one.  Nonsense.

# Since the usage of KERNEL_VERSION and LINUX_VERSIO_CODE is deeply rooted, it has been decided to 
# leave the usage of these macros alone, but define them ourselves for user space programs rather than 
# obtaining them from /usr/include/linux/version.h.

# Previous user space includes of <linux/version.h> have now been replaced by an explicit definition of the KERNEL_VERSION macro.
# The explicitely defined KERNEL_VERSION macro, combined with the following definition of LINUX_VERSION_CODE is what replaces the old mechanism.

# In order to find old user space inclusions of <linux/version.h>, just grep for KERNEL_VERSION.

# 132640 = 2.6.32 Redhat 6
# 132635 = 2.6.27 SuSE 11
# 132626 = 2.6.18 Redhat 5
# 132624 = 2.6.16 SuSE 10
# 132617 = 2.6.9 Redhat 4
# 132613 = 2.6.5 SuSE 9

ifneq (,$(strip $(findstring 2.6.32,$(OSRELEASE))))
PLATFORMDEFINES += -D LINUX_VERSION_CODE=132640
endif
ifneq (,$(strip $(findstring 2.6.27,$(OSRELEASE))))
PLATFORMDEFINES += -D LINUX_VERSION_CODE=132635
endif
ifneq (,$(strip $(findstring 2.6.18,$(OSRELEASE))))
PLATFORMDEFINES += -D LINUX_VERSION_CODE=132626
endif
ifneq (,$(strip $(findstring 2.6.16,$(OSRELEASE))))
PLATFORMDEFINES += -D LINUX_VERSION_CODE=132624
endif
ifneq (,$(strip $(findstring 2.6.9,$(OSRELEASE))))
PLATFORMDEFINES += -D LINUX_VERSION_CODE=132617
endif
ifneq (,$(strip $(findstring 2.6.5,$(OSRELEASE))))
PLATFORMDEFINES += -D LINUX_VERSION_CODE=132613
endif
else
# 122116 = 2.4.20
PLATFORMDEFINES += -D LINUX_VERSION_CODE=132116
endif

ifeq ( ,$(findstring LINUX_VERSION_CODE,$(PLATFORMDEFINES)))
$(error LINUX_VERSION_CODE is not set in Makefile.inc.Linux)
endif

HOST_SMP = $(shell echo $(TARGET_KERNEL) | grep smp)
ifneq (,$(HOST_SMP))
SMPDEFINES = -D__BOOT_KERNEL_SMP
endif
HOST_IA32E = $(shell echo $(TARGET_KERNEL) | grep ia32e)
ifneq (,$(HOST_IA32E))
IA32EDEFINES = -D__MODULE_KERNEL_ia32e=1
endif
HOST_ATHLON = $(shell echo $(TARGET_ISA) | grep athlon)
ifneq (,$(HOST_ATHLON))
ATHLONDEFINES = -D__MODULE_KERNEL_athlon=1
endif
HOST_I686 = $(shell echo $(TARGET_ISA) | grep i686)
ifneq (,$(HOST_I686))
I686DEFINES = -D__MODULE_KERNEL_i686=1
endif

HOST_IA64 = $(shell echo $(TARGET_ISA) | grep ia64)
ifneq (,$(HOST_IA64))
IA64DEFINES = -D__MODULE_KERNEL_ia64=1
endif

KDEFINES  = -D__KERNEL__ -D__BOOT_KERNEL_H_ $(SMPDEFINES) $(IA32EDEFINES) \
            $(ATHLONDEFINES) $(I686DEFINES) $(EXTRA_KDEFINES)
KDEBUG   := -DDEBUG -D_DEBUG -DTDMF_TRACE -DFTD_DEBUG
KINCLUDES = $(EXTRA_KINCLUDES) \
			-isystem $(KBLDENV)/lib/modules/$(TARGET_KERNEL)/build/include \
			-include $(KBLDENV)/lib/modules/$(TARGET_KERNEL)/build/include/config/modversions.h
KTARGET   = $($(TARGET_ISA)-$(TARGET_CLASS)-CFLAGS) \
		    $($(HOST_ISA)-$(TARGET_ISA)-$(TARGET_CLASS)-CFLAGS)
KCOPTFLAGS= -O2 $(EXTRA_KOPTFLAGS)
KCFLAGS   =  -Wall -Wno-trigraphs -Wno-unused $(KCOPTFLAGS) $(KTARGET) $(EXTRA_KCFLAGS)
KLDFLAGS  = $($(TARGET_ISA)-$(TARGET_CLASS)-LDFLAGS) \
		    $($(HOST_ISA)-$(TARGET_ISA)-$(TARGET_CLASS)-LDFLAGS)
KCSTRICT := -fno-strict-aliasing -Wstrict-prototypes -fno-common

UDEFINES  = $(EXTRA_UDEFINES)
UDEBUG   := -DDEBUG -D_DEBUG -DTDMF_TRACE -DFTD_DEBUG
UINCLUDES = $(EXTRA_UINCLUDES)
UTARGET   = $($(HOST_PROCESSOR)-m32-CFLAGS)
# The sysv hash style is required when linking in order to meet LSB compliance.  C.F. RFX-123.
LINKOPTS  = -Wl,--hash-style=sysv
UCOPTFLAGS= -O2 $(EXTRA_UOPTFLAGS)
UCFLAGS   =  -Wall -Wno-trigraphs -Wno-unused $(UCOPTFLAGS) $(UTARGET) $(EXTRA_UCFLAGS)
UCSTRICT := -fno-strict-aliasing -Wstrict-prototypes -fno-common

#defaults
CINCLUDES += $(UINCLUDES)
CDEFINES  += $(UDEFINES)
COPTFLAGS += $(UCFLAGS)

INSTALL=/usr/bin/install -c
INITDIR=${DESTDIR}/etc/init.d
#DK Hardware type of host OS is  uname -m
HWTYPE         := $(shell uname -m)

HOST_ISA       := $(shell if [ `uname -i` = "x86_64" -a -f /boot/kernel.h ] && \
							 grep '__MODULE_KERNEL_ia32e 1' /boot/kernel.h 2>&1 >/dev/null ; then \
						      echo ia32e ; \
						  else \
						  	  uname -i ; \
						  fi)
ifneq (,$(findstring 2.6,$(OSRELEASE)))
HOST_PROCESSOR := $(shell uname -m)
else
HOST_PROCESSOR := $(shell uname -p)
endif
HOST_KERNEL    := $(shell uname -r)
TARGET_KERNEL  := $(HOST_KERNEL)
athlon_CLASS   := m32
i686_CLASS     := m32
i586_CLASS     := m32
i486_CLASS     := m32
i386_CLASS     := m32
x86_64_CLASS   := m64
ia64_CLASS     := m64
ia32e_CLASS    := m64
s390x_CLASS    := m64

ifneq (,$(findstring 2.6,$(OSRELEASE)))
m32_ISALIST    = i686
else
m32_ISALIST    = athlon i686
endif

ifeq (s390x,$(HOST_PROCESSOR))
m64_ISALIST  = s390x
else
ifeq (ia64,$(HOST_PROCESSOR))
m64_ISALIST  = ia64
else
m64_ISALIST  = x86_64
endif
endif

ia32e-x86_64-m32-LDFLAGS := -melf_i386
ia32e-i686-m32-LDFLAGS   := -melf_i386
ia32e-i586-m32-LDFLAGS   := -melf_i386
ia32e-i486-m32-LDFLAGS   := -melf_i386
ia32e-i386-m32-LDFLAGS   := -melf_i386i
ia64-m64-LDFLAGS         :=

s390x-m64-LDFLAGS        :=

x86_64-m64-CFLAGS        := -mcmodel=kernel
x86_64-m32-CFLAGS        := 
#ia64-m32-CFLAGS          := -m32 -malign-double -march=i686
ia64-m32-CFLAGS          := 
# -m64 -malign-double -march=ia64 -DLP_KERNEL
i686-athlon-m32-CFLAGS   := -mcmodel=kernel
athlon-m32-CFLAGS        := -m32 -march=athlon
i686-m32-CFLAGS          := -m32 -march=i686
i586-m32-CFLAGS          := -m32 -march=i586
i486-m32-CFLAGS          := -m32 -march=i486
i386-m32-CFLAGS          := -m32 -march=i386
i64-m64-CFLAGS          := 
#-m64 -march=ia64
s390x-m32-CFLAGS         := -m31 -mzarch
s390x-m64-CFLAGS         := -m64 -mzarch
