#!/usr/bin/ksh

# First letter uppercase readonly variable
# All uppercase exported variable
# First letter lowercase read/write variable

Cmd=${0##*/}

function Usage
{
    typeset use="Usage: $Cmd "
    typeset len=${#use}

    print "${use}[brand=rep|tdmf] [build=number] [fix=number]"
    printf "%${len}s%s\n" "" "[(build)prefix=string] [(build)suffix=string]"
    printf "%${len}s%s\n\n" "" "[(build)option=skiptaring] [exitat=brand|clean|build] [logfile]"
    print "\tThe brand parameter defaults to \"rep\"."
    print "\tThe build parameter defaults to the value in var.gmk_in."
    print "\tThe fix parameter defaults to the value in vars.gmk_in."
    print "\tThe buildprefix parameter defaults to the value in vars.gmk_in."
    print "\tThe buildsuffix parameter defaults to the value in vars.gmk_in."
    print "\tThe exitat parameter stops processing at the named step."
    print "\tThe buildoption parameter controls special features of the build."
    print "\tprocess which may be platform dependent."
    print "\tThe logfile parameter is a filename to contain the output from"
    print "\tbuild.  Otherwise the output is written to standard output and"
    print "\tstandard error."
}

function VerifyExecutable
{
    # Should only contain builtin ksh commands

    typeset prog path
    typeset -u PROG
    typeset -i status=0
    for prog
    do
	if path=$(whence "${prog}")
	then
	    PROG="${prog}"
	    eval alias ${PROG}=\"${path}\"
	else
	    print "Cannot find $prog within the path"
	    print $PATH
	    status=1
	fi
    done
    return $status
}

function ParseCmdLine {
    typeset -u key
    typeset value
    typeset -i status=0

    for i
    do
	key=$i
	value=${i#*=}
	case $key in
	    ?(-|--|/)BRAND=*)
		if [[ "${value}" = @(rep|tdmf) ]]
		then
		    export BRAND="${value}"
		else
		    print "Specify rep or tdmf for the brand value"
		    let status=1
		fi
		;;
	    ?(-|--|/)FIX=*)
		if [[ "${value}" = +([0-9]) ]]
		then
		    export FIXNUM="${value}"
		else
		    print "Specify a zero or postive value for the fix parameter"
		    let status=1
		fi
		;;
	    ?(-|--|/)BUILD=*)
		if [[ "${value}" = [1-9]*([0-9]) ]]
		then
		    export BUILDNUM="${value}"
		else
		    print "Specify a positive alue for the build parameter"
		    let status=1
		fi
		;;
	    ?(-|--|/)?(BUILD)PREFIX=*)
		export BUILDPREFIX="${value}"
		;;
	    ?(-|--|/)?(BUILD)SUFFIX=*)
		export BUILDSUFFIX="${value}"
		;;
	    ?(-|--|/)EXITAT=*)
		if [[ "${value}" = @(clean|brand|build) ]]
		then
		    export EXITAT="${value}"
		else
		    print "Specify clean, brand or build for the exitat value"
		    let status=1
		fi
		;;
	    ?(-|--|/)?(BUILD)OPTION=*)
		if [[ "${value}" = @(skiptaring) ]]
		then
		    typeset -u option=${value}
		    eval export ${option}=\"1\"
		else
		    print "Specify skiptaring for the buildoption value"
		    let status=1
		fi
		;;
	    ?(-|--|/)@(?|H|HE|HEL|HELP))	
		Usage
		let status=1
		;;
	    *)
		if [[ "${i}" = "${value}" ]]
		then
		    if [[ -z "${LOGFILE}" ]]
		    then
			if [[ -f "${value}" ]]
			then
			    if [[ ! -w "${value}" ]]
			    then
				print "The logfile specified is not writable."
				print "${value}"
				let status=1
			    fi
			else
			    (>"${value}") 2>/dev/null
			    if [[ "$?" -ne 0 ]]
			    then
				print "Cannot create logfile due to a directory does not exist or is not writable."
				print "${value}"
				let status=1
			    fi
			fi
			export LOGFILE="${value}"
		    else
			print "logfile parameter has already been set"
			let status=1
		    fi
		else
		    print "Invalid parameter specified " ${i}
		    let status=1
		fi
		;;
	esac
    done
    return $status
}

unalias -a
PATH=/usr/bin:/bin:/usr/sbin:/usr/local/bin
VerifyExecutable uname || exit $?

SYSTYPE=$(UNAME)
if [[ $SYSTYPE = 'AIX' ]]
then
    PATH=$PATH:/opt/freeware/bin:/usr/vacpp/bin:/usr/vac/bin:.
elif [[ $SYSTYPE = 'SunOS' ]]
then
    PATH=$PATH:/usr/ucb:/usr/SUNWspro/bin:/usr/ccs/bin:/usr/sfw/bin:/opt/sfw/bin:.
elif [[ $SYSTYPE = 'Linux' ]]
then
    PATH=$PATH:.
elif [[ $SYSTYPE = 'HP-UX' ]]
then
    PATH=$PATH:/usr/langtools/bin:.
else
    print "Unknown system type '${SYSTYPE}' value."
    exit 1
fi

VerifyExecutable printf ls rm cp whoami gmake mkdir tar gmake || exit $?

ParseCmdLine $@ || exit $?
if [[ -n "${LOGFILE}" ]]
then
    exec 1>${LOGFILE} 2>&1
fi

trap "trap '' EXIT HUP INT QUIT; print \"Time: Done\" \$(date)" EXIT HUP INT QUIT

print "Time: Before brand"  $(date)

# Because parameters are exported, we don't need to specify them

cd rebrand
GMAKE ${BRAND} || exit $?
cd ..

print "Time: Before clean"  $(date)

[[ "${EXITAT}" = 'brand' ]] && exit 0

if [[ ${SYSTYPE} = 'SunOS' || ${SYSTYPE} = 'Linux' || ${SYSTYPE} = 'HP-UX' ]]
then
    GMAKE clean || exit $?
    print "Time: Before build"  $(date)
    [[ "${EXITAT}" = 'clean' ]] && exit 0
    if [[ "${EXITAT}" = 'build' ]]
    then
	GMAKE all || exit $?
    else
	GMAKE cdrom || exit $?
    fi

elif [[ ${SYSTYPE} = 'AIX' ]]
then
    GMAKE clean || exit 1
    print "Time: Before build"  $(date)
    [[ "${EXITAT}" = 'clean' ]] && exit 0
    cd pkg.install
    GMAKE common || exit 1
    cd ..
    GMAKE all || exit 1
    [[ "${EXITAT}" = 'build' ]] && exit 0

    # build an installation package
    cd installp/mklpp/aixbin
    GMAKE || exit 1
    cd ../../..

else
    print "Unknown system type '${SYSTYPE}' value."
    exit 1
fi
