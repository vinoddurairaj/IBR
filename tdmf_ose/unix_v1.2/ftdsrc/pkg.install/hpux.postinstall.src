#! /sbin/sh
###############
# Product: %Q%
# Fileset: %Q%.Programs
# postinstall
################
#
# Copyright (c) %COPYRIGHTYEAR 2001% %COMPANYNAME%. All rights reserved.
#
########################################################################
#                                                                      #

UTILS=/usr/lbin/sw/control_utils
SEDTMP=/tmp/mod_bcheckrc.sed
BCHECKRC=/sbin/bcheckrc
VERS=`uname -r | sed '\@\.@ s@@@g' | tr -d '[A-Z]'`
DLKM=0
if [ ${VERS} -ge 1100 ]
then
    DLKM=1
fi

if [[ ! -f $UTILS ]]
then
    print "ERROR:   Cannot find the sh functions library $UTILS"
    exit 1
fi
. $UTILS

exitval=$SUCCESS                # Anticipate success

# Place in.%Q% in $SERVICES
SERVICES=/etc/services
RMD_PORT=575

/usr/bin/cp -p $SERVICES $SERVICES.pre%Q%
(egrep -v 'in\.%Q%' $SERVICES.pre%Q% ; \
 echo "in.%Q%           ${RMD_PORT}/tcp        # %PKGNM% master daemon") \
	  > $SERVICES

########################################################
# Only modify the system file on the root file system. #
# If this is an NFSdiskless installation, or alternate #
# root, then configure will handle it.                 #
########################################################

if [ ${VERS} -eq 1020 ]
then
if [[ -z "${SW_DEFERRED_KERNBLD}" ]]
then
    
    ########################################
    #                                      #
    # Place ftd driver into system file.   #
    #                                      #
    ########################################
    
    mod_systemfile $SW_SYSTEM_FILE_PATH -a %Q% 
    if [[ $? -ne 0 ]]
    then
        print "ERROR:   Cannot update $SW_SYSTEM_FILE_PATH to"
        print "         include %Q%."
        exitval=$FAILURE 
    fi
    
    #############
    # Finished. #
    #############

fi	# end of "if [[ -z ${SW_DEFERRED_KERNBLD}" ]]
fi	# end of VERS -eq 1020

#
# Update /etc/PATH to include /opt/FTSWftd/bin
#
mod_pathfile -a P /%FTDBINDIR%

#
# create a soft link for dtcautomount for
# backward compatibility
#
ln -s /%FTDBINDIR%/%Q%modfs /%FTDBINDIR%/%Q%automount

FTDLINKS="%Q%checkpoint %Q%configtool %Q%debugcapture %Q%hostinfo %Q%info %Q%init %Q%killpmd %Q%killrefresh %Q%killrmd %Q%licinfo %Q%monitortool %Q%override %Q%perftool %Q%pmd %Q%refresh %Q%rmdreco %Q%set %Q%start %Q%stop in.%Q% in.pmd in.rmd kill%Q%master killpmds killrefresh killrmds launch%Q%master launchpmds launchrefresh throtd %Q%modfs %Q%automount in.%QAGN% %Q%agentset launchagent killagent %Q%psmigrate %Q%expand %Q%limitsize %Q%panalyze launchnetanalysis %Q%netanalysis %Q%stopnetanalysis %Q%psmigrate272"
FTDLINKS="$FTDLINKS %Q%monitortty %Q%hrdb_maths %Q%failover %Q%sendfailover"
# Note: launchbackfresh, killbackfresh, %Q%backfresh, %Q%killbackfresh deactivated as of TDMF IP 2.8.0
#
# dynamic volume expansion feature disabled
# %Q%reconfig
#
# make links from /usr/local/bin to /%FTDBINDIR%/*
#
if [ -d /usr/local/bin -a -w /usr/local/bin ]; then
    for LINK in $FTDLINKS
    do
        ln -s /%FTDBINDIR%/${LINK} /usr/local/bin/${LINK} > /dev/null 2>&1
    done
fi

#
# make links in rc.* directories
#
ln -s /%ETCINITDDIR%/%PKGNM%-chkpt_boot /%ETCR3DDIR%/S024%PKGNM%-chkpt_boot
ln -s /%ETCINITDDIR%/%PKGNM%-startdaemons /%ETCR3DDIR%/S025%PKGNM%-startdaemons
ln -s /%ETCINITDDIR%/%PKGNM%-startdaemons /%ETCR2DDIR%/K025%PKGNM%-startdaemons
ln -s /%ETCINITDDIR%/%PKGNM%-startagent /%ETCR3DDIR%/S026%PKGNM%-startagent
ln -s /%ETCINITDDIR%/%PKGNM%-startagent /%ETCR2DDIR%/K026%PKGNM%-startagent

if [ ${VERS} -eq 1111 ]
then
    # On 11v1, the DLKM drivers are loaded at /sbin/rc1.d/S112kminit and stopped at /sbin/rc0.d/K888kminit.
    # This is too late in the startup and too late in the shutdown sequence to be able to detect the filesystems
    # being checked, mounted and unmounted, but we can only start our groups when our driver is loaded.
    # See WR #PROD00003701
    ln -s /%ETCINITDDIR%/%PKGNM%-scan /sbin/rc1.d/S113%PKGNM%-scan
    ln -s /%ETCINITDDIR%/%PKGNM%-scan /%ETCRSDDIR%/K887%PKGNM%-scan
else
    # On other releases, we start our groups from within /sbin/bcheckrc and stop our groups after everything has been unmounted.
    ln -s /%ETCINITDDIR%/%PKGNM%-scan /%ETCRSDDIR%/K901%PKGNM%-scan
fi

#
# Add %Q%start into /etc/bcheckrc
#
grep "%Q%start" ${BCHECKRC} > /dev/null 2>&1

# We do not start our groups from /sbin/bcheckrc on 11iv1, as our driver isn't loaded yet. C.F. WR #PROD00003701
if [ $? -ne 0 -a ${VERS} -ge 1123 ]
then
    echo "\nAdding driver start hooks to ${BCHECKRC}.\n" 
    #
    # not found, add it in
    #
    # First backup original bcheckrc
    cp ${BCHECKRC} ${BCHECKRC}.pre%CAPQ%
    #
    # find the line 2 lines past the last line with /sbin/lvmrc in it
    #
    lineno=`cat ${BCHECKRC} | sed -n -e '/\/sbin\/lvmrc/=' | tail -1`
    lineno=`expr $lineno + 2`
    if [ xx"${lineno}" = "xx" ]
    then
        echo "${BCHECKRC} context to modify not found";
    else
        if [ `uname -m` = 'ia64' ]
        then
            # Modify with a workaround for itanium.  See WR #PROD00003646
            # The number of lines must be kept identical in both the ia64 and hp-pa patches, as this simplifies
            # the job of hpux.postremove who has to delete the patch!
            cat > ${SEDTMP} << EOSEDCMD
${lineno} a\\
#*********************************************************************\\
# The following lines were added by the %PRODUCTNAME% Installation\\
#*********************************************************************\\
# Since we do not have a fully static dtcstart on ia64, we temporarily need access to /usr. \\
(/sbin/mount -o ro /usr && /%ETCINITDDIR%/%PKGNM%-scan start) || echo "%COMPANYNAME2% %PRODUCTNAME% failed to mount /usr and automatically start the groups." \\
/sbin/umount /usr \\
#*********************************************************************\\
# End of %PRODUCTNAME% modifications\\
#*********************************************************************
EOSEDCMD
        else
            # Modify the easy way for HP-PA 11iv2 and 11iv3.
            # The number of lines must be kept identical in both the ia64 and hp-pa patches, as this simplifies
            # the job of hpux.postremove who has to delete the patch!
            cat > ${SEDTMP} << EOSEDCMD
${lineno} a\\
#*********************************************************************\\
# The following lines were added by the %PRODUCTNAME% Installation\\
#*********************************************************************\\
#\\
/%ETCINITDDIR%/%PKGNM%-scan start \\
#\\
#*********************************************************************\\
# End of %PRODUCTNAME% modifications\\
#*********************************************************************
EOSEDCMD

        fi

        # apply the patch
        cat ${BCHECKRC} | sed -f ${SEDTMP} > ${BCHECKRC}.new%CAPQ%
	    chmod 544 ${BCHECKRC}.new%CAPQ%
        mv ${BCHECKRC}.new%CAPQ% ${BCHECKRC}
        # notify user of change
        echo "The following lines have been added to ${BCHECKRC} after the"
        echo "activation of LVM volume groups and before the filesystem checks:\n"
        sed -e '1d' ${SEDTMP}
        echo "\nPlease inspect ${BCHECKRC} to verify this modification."
        echo "The original ${BCHECKRC} file has been saved to ${BCHECKRC}.pre%CAPQ%"
        echo "so that you may restore it if necessary.\n"
        # clean up
        rm -f ${SEDTMP}
    fi
fi

# Check if the flag file exists indicating that we use the legacy licensing mechanism
# in which case the license is provided by Product Support or we reuse the already existing customer license.
if [ -f /var/opt/SFTKdtc/SFTKdtc_use_legacy_mechanism ]
then
    rm -f /%OURCFGDIR%/DTC.lic.perm
else
    # Rename the new packaged permanent license file to the effective name
    echo "Making DTC.lic.perm the effective DTC.lic."
    mv /%OURCFGDIR%/DTC.lic.perm /%OURCFGDIR%/DTC.lic
    chmod 0444 /%OURCFGDIR%/DTC.lic
fi

# Copy the config files from past revs

if [ -d /%VAROPTDIR%/%PKGNM% ]; then
    cd /%VAROPTDIR%/%PKGNM%
    a=`find . -type d -print | xargs ls -td | egrep '^'\./%PKGNM% | head -1`
    if [ "$a" != "" ]; then
    if [ -f /var/opt/SFTKdtc/SFTKdtc_use_legacy_mechanism ]
    then
	    echo Restoring earlier configuration and license files from /%VAROPTDIR%/%PKGNM%/$a.
    else
	    echo Restoring earlier configuration files from /%VAROPTDIR%/%PKGNM%/$a.
    fi
	mkdir -p /%OURCFGDIR%
    # Starting with release 2.8.0 (product ownership going to IBM STG), the license file is now
    # part of the package; we do not need to restore a previously installed license
    # UNLESS the flag file exists indicating that we use the legacy licensing mechanism.
    if [ -f /var/opt/SFTKdtc/SFTKdtc_use_legacy_mechanism ]
    then
	    for i in $a/*.lic
	    do	
	        cp $i /%OURCFGDIR% > /dev/null 2>&1
	    done
    fi
	for i in $a/*.sh
	do	
	    cp $i /%OURCFGDIR% > /dev/null 2>&1
	done
	if [ -f $a/devlist.conf ]; then
           cp $a/devlist.conf /%OURCFGDIR% > /dev/null 2>&1
	fi 
    fi
else
    mkdir -p /%VAROPTDIR%/%PKGNM% 
    # -- see if a previous installation of %PRODUCTNAME% exists instead
    if [ -d /var/opt/FTSWftd ]; then
        cd /var/opt/FTSWftd
        a=`find . -type d -print | xargs ls -td | egrep / | head -1`
        if [ "$a" != "" ]; then
            # Starting with release 2.8.0 (product ownership going to IBM STG), the license file is now
            # part of the package; we do not need to restore a previously installed license
            # UNLESS the flag file exists indicating that we use the legacy licensing mechanism.
            if [ -f /var/opt/SFTKdtc/SFTKdtc_use_legacy_mechanism ]
            then
                if [ "${a}/*.lic" != "" ]; then
                    echo "Converting and restoring previously saved Softek %PRODUCTNAME%"
                    echo "   license key file to the %PRODUCTNAME% %VERSION% installation."
                fi
                for i in ${a}/*.lic
                do
                    cat ${i} | sed 's/FTD_LICENSE/%CAPQ%_LICENSE/g' > /%FTDCFGDIR%/%CAPQ%.lic
                done
                /bin/chmod 0755 /%FTDCFGDIR%/%CAPQ%.lic
            fi

            # see if there are any shell scripts for checkpointing
            chdir ${a}
            if [ "*.sh" != "" ]; then
                echo "Migrating previously saved Softek %PRODUCTNAME% checkpoint shell script files."
                echo "*** WARNING" 
                echo "\07*** WARNING:  Automatic conversion of checkpoint script files "
                echo "*** WARNING:  is being attempted.  These files may require "
                echo "*** WARNING:  additional editing before use!!!"
                echo "*** WARNING" 
            fi
            for i in *.sh
            do
                /bin/cat $i | /bin/sed '{
s/FTSWftd/%PKGNM%/g
s/ftd/%Q%/g
s/FTD/%CAPQ%/g
}' > /etc/opt/%PKGNM%/$i
            chmod 755 /etc/opt/%PKGNM%/$i
            done
        fi
    fi
fi

# make /%VAROPTDIR%/%PKGNM%/Agn_tmp directory
b=/var/opt/%PKGNM%/Agn_tmp
if [ ! -d $b ]; then
    mkdir -p ${b}
fi

# Create %Q%, pmd, rmd, rmda run dir root
b=/var/opt/%PKGNM%/run
if [ ! -d $b ] ; then
    rm -f $b
    mkdir -p $b
fi

#
# install the kernel module %Q%
#
# DTurrin (Aug 17th, 2001)
#      Changed -eq to -ge in first "if"
#      to take OS version 11i into account.
#
# Added HP-UX 11.23 (JW)
#
if [ ${VERS} -ge 1123 ]
then
	# PH-UX 11.23 related kernel module installation
	# Only 64-bit kernel module for 11.23

	# deinstall the previous driver if any
	if [ -f /usr/conf/mod/%Q% ]
	then
		# remove the driver ...
		echo "remove the existing %Q% driver first"
		mod_systemfile ${SW_SYSTEM_FILE_PATH} -d %Q%
		retval=$?
		if [[ $retval -ne $SUCCESS ]]
		then
			echo "failed to remove the existing %Q% driver"
			[[ $exitval -ne $FAILURE ]] && exitval=$retval
		fi
	fi

	mod_systemfile ${SW_SYSTEM_FILE_PATH} -a %Q%
	retval=$?
	if [[ $retval -ne $SUCCESS ]]
	then
		msg ERROR "Count not enter %Q% driver in the ${SW_SYSTEM_FILE_PATH}"	
		[[ $exitval -ne $FAILURE ]] && exitval=$retval
	fi

elif [ ${VERS} -ge 1100 ]
then
        bits=`/bin/getconf KERNEL_BITS`
	cd /usr/conf/%Q%
	# load either 32 or 64 bits driver
	if [ ${bits} -eq 32 ]
	then
	   cp mod32.o mod.o
	else
	   cp mod64.o mod.o
	fi
	# deinstall the previous driver if any
	if [ -d /usr/conf/km.d/%Q%/mod.o ]
	then
	   kminstall -d %Q%
	fi
	kminstall -a %Q%

	if [ ${DLKM} -eq 1 ]
	then
	   # change /etc/rc.config.d/kminit KM_INIT=1
	   cp /etc/rc.config.d/kminit /etc/rc.config.d/kminit.pre%CAPQ%
	   cat /etc/rc.config.d/kminit |\
	      sed -e '/^KM_INIT=.*/s//KM_INIT=1/' >> /tmp/kminit.tmp
	   cp /tmp/kminit.tmp /etc/rc.config.d/kminit
	   rm /tmp/kminit.tmp
	fi
fi

cd / ; /%ETCINITDDIR%/%PKGNM%-startdaemons start
