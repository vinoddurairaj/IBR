// TDMFObjects.idl : IDL source for TDMFObjects.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (TDMFObjects.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

#if (__midl >= 501)
midl_pragma warning( disable: 2362 )
#endif

#include "TDMFObjectsDef.h"

interface IScriptServerFile;
interface IServer;
interface IDomain;
interface ISystem;
interface IReplicationGroup;
interface IReplicationPair;
interface IDevice;
interface IEvent;
interface IDeviceList;
interface ICollectorStats;


	typedef enum tagElementState
	{
		[helpstring("UNDEF: White state")]		ElementUndef   = 0,
		[helpstring("Error: Red state")]		ElementError   = 1,
		[helpstring("Warning : Yellow state")]	ElementWarning = 2,
		[helpstring("OK: Green state")]			ElementOk      = 3
	} ElementState;

	typedef enum tagConnectionStatus
	{
		[helpstring("Undef")]		FTD_UNDEF      = 2,
		[helpstring("PMD Only")]	FTD_PMD_ONLY   = 0,
		[helpstring("Connected")]	FTD_CONNECTED  = 1,
		[helpstring("Accumulate")]	FTD_ACCUMULATE = -1
	} ConnectionStatus;

	typedef enum tagMode
	{
		[helpstring("UNDEF")]	    FTD_M_UNDEF         = 0x00,
		[helpstring("JNLUPDATE")]	FTD_M_JNLUPDATE     = 0x01,
		[helpstring("BITUPDATE")]	FTD_M_BITUPDATE     = 0x02,
		[helpstring("PASSTHRU")]	FTD_MODE_PASSTHRU   = 0x10,
		[helpstring("NORMAL")]		FTD_MODE_NORMAL     = FTD_M_JNLUPDATE,
		[helpstring("TRACKING")]	FTD_MODE_TRACKING   = FTD_M_BITUPDATE,
		[helpstring("REFRESH")]		FTD_MODE_REFRESH    = (FTD_M_JNLUPDATE | FTD_M_BITUPDATE),
		[helpstring("BACKFRESH")]	FTD_MODE_BACKFRESH  = 0x20,
		[helpstring("CHECKPOINT")]	FTD_MODE_CHECKPOINT = 0x200
	} GroupMode;

	typedef enum tagReplicationPairObjectState
	{
		[helpstring("Saved")]	 RPO_SAVED    = 0,
		[helpstring("Deleted")]	 RPO_DELETED  = 1,
		[helpstring("Modified")] RPO_MODIFIED = 2,
		[helpstring("New")]      RPO_NEW      = 3,
	} ReplicationPairObjectState;

	typedef enum tagTdmfCommand
	{
		FIRST_CMD  = 0x2000

		,CMD_START     = FIRST_CMD
		,CMD_STOP
		,CMD_INIT
		,CMD_OVERRIDE
		,CMD_INFO
		,CMD_HOSTINFO
		,CMD_LICINFO
		,CMD_RECO
		,CMD_SET
		,CMD_LAUNCH_PMD
		,CMD_LAUNCH_REFRESH
		,CMD_LAUNCH_BACKFRESH
		,CMD_KILL_PMD
		,CMD_KILL_RMD
		,CMD_KILL_REFRESH
		,CMD_KILL_BACKFRESH
		,CMD_CHECKPOINT
		,CMD_OS_CMD_EXE
		,CMD_TESTTDMF  //a simple test program
		,CMD_TRACE
		,CMD_HANDLE
		,CMD_PANALYZE
		,LAST_CMD  = CMD_HANDLE
		,INVALID_CMD//beyond cmd list
	} TdmfCommand;

	typedef enum tagTdmfDBTable
	{
		TDMF_DB_ALL_TABLES			= _TDMF_DB_ALL_TABLES,
		TDMF_DB_DOMAIN_TABLE		= _TDMF_DB_DOMAIN_TABLE,
		TDMF_DB_SERVER_TABLE		= _TDMF_DB_SERVER_TABLE,
		TDMF_DB_GROUP_TABLE			= _TDMF_DB_GROUP_TABLE,
		TDMF_DB_PAIR_TABLE			= _TDMF_DB_PAIR_TABLE,
		TDMF_DB_PERFORMANCE_TABLE	= _TDMF_DB_PERFORMANCE_TABLE,
		TDMF_DB_PEOPLE_TABLE		= _TDMF_DB_PEOPLE_TABLE,
		TDMF_DB_ALERT_TABLE			= _TDMF_DB_ALERT_TABLE,
		TDMF_DB_COMMAND_TABLE		= _TDMF_DB_COMMAND_TABLE,
		TDMF_DB_PARAMETERS_TABLE	= _TDMF_DB_PARAMETERS_TABLE
	} TdmfDBTable;

	typedef enum tagTdmfErrorCode
	{
		TDMF_ERROR_OK                               = _TDMF_ERROR_CODE_OK,
		TDMF_ERROR_SUCCESS                          = _TDMF_ERROR_CODE_SUCCESS,
		TDMF_ERROR_INTERNAL_ERROR                   = _TDMF_ERROR_CODE_INTERNAL_ERROR,
		TDMF_ERROR_INVALID_PARAMETER                = _TDMF_ERROR_CODE_INVALID_PARAMETER,
		TDMF_ERROR_ILLEGAL_IP_OR_PORT_VALUE         = _TDMF_ERROR_CODE_ILLEGAL_IP_OR_PORT_VALUE,
		TDMF_ERROR_SENDING_DATA_TO_COLLECTOR        = _TDMF_ERROR_CODE_SENDING_DATA_TO_COLLECTOR,
		TDMF_ERROR_RECEIVING_DATA_FROM_COLLECTOR    = _TDMF_ERROR_CODE_RECEIVING_DATA_FROM_COLLECTOR,
		TDMF_ERROR_UNABLE_TO_CONNECT_TO_COLLECTOR   = _TDMF_ERROR_CODE_UNABLE_TO_CONNECT_TO_COLLECTOR,
		TDMF_ERROR_UNABLE_TO_CONNECT_TO_TDMF_AGENT  = _TDMF_ERROR_CODE_UNABLE_TO_CONNECT_TO_TDMF_AGENT,
		TDMF_ERROR_COMM_RUPTURE_WITH_TDMF_AGENT     = _TDMF_ERROR_CODE_COMM_RUPTURE_WITH_TDMF_AGENT,
		TDMF_ERROR_COMM_RUPTURE_WITH_TDMF_COLLECTOR = _TDMF_ERROR_CODE_COMM_RUPTURE_WITH_TDMF_COLLECTOR,
		TDMF_ERROR_UNKNOWN_TDMF_AGENT               = _TDMF_ERROR_CODE_UNKNOWN_TDMF_AGENT,
		TDMF_ERROR_UNKNOWN_DOMAIN_NAME              = _TDMF_ERROR_CODE_UNKNOWN_DOMAIN_NAME,
		TDMF_ERROR_UNKNOWN_HOST_ID                  = _TDMF_ERROR_CODE_UNKNOWN_HOST_ID,
		TDMF_ERROR_UNKNOWN_SOURCE_SERVER            = _TDMF_ERROR_CODE_UNKNOWN_SOURCE_SERVER,
		TDMF_ERROR_UNKNOWN_TARGET_SERVER            = _TDMF_ERROR_CODE_UNKNOWN_TARGET_SERVER,
		TDMF_ERROR_UNKNOWN_REP_GROUP                = _TDMF_ERROR_CODE_UNKNOWN_REP_GROUP,
		TDMF_ERROR_SAVING_TDMF_AGENT_CONFIGURATION  = _TDMF_ERROR_CODE_SAVING_TDMF_AGENT_CONFIGURATION,
		TDMF_ERROR_ILLEGAL_TDMF_AGENT_CONFIGURATION_PROVIDED = _TDMF_ERROR_CODE_ILLEGAL_TDMF_AGENT_CONFIGURATION_PROVIDED,
		TDMF_ERROR_DELETING_SOURCE_REP_GROUP        = _TDMF_ERROR_CODE_DELETING_SOURCE_REP_GROUP,
		TDMF_ERROR_DELETING_TARGET_REP_GROUP        = _TDMF_ERROR_CODE_DELETING_TARGET_REP_GROUP,
		TDMF_ERROR_SET_SOURCE_REP_GROUP             = _TDMF_ERROR_CODE_SET_SOURCE_REP_GROUP,
		TDMF_ERROR_SET_TARGET_REP_GROUP             = _TDMF_ERROR_CODE_SET_TARGET_REP_GROUP,
		TDMF_ERROR_CREATING_DB_RECORD               = _TDMF_ERROR_CODE_CREATING_DB_RECORD,
		TDMF_ERROR_UPDATING_DB_RECORD               = _TDMF_ERROR_CODE_UPDATING_DB_RECORD,
		TDMF_ERROR_DELETING_DB_RECORD               = _TDMF_ERROR_CODE_DELETING_DB_RECORD,
		TDMF_ERROR_FINDING_DB_RECORD                = _TDMF_ERROR_CODE_FINDING_DB_RECORD,
		TDMF_ERROR_DATABASE_RELATION_ERROR          = _TDMF_ERROR_CODE_DATABASE_RELATION_ERROR,
		TDMF_ERROR_DATABASE_TRANSACTION             = _TDMF_ERROR_CODE_DATABASE_TRANSACTION,
		TDMF_ERROR_AGENT_PROCESSING_TDMF_CMD        = _TDMF_ERROR_CODE_AGENT_PROCESSING_TDMF_CMD,
		TDMF_ERROR_EMPTY_OBJECT_LIST_PROVIDED       = _TDMF_ERROR_CODE_EMPTY_OBJECT_LIST_PROVIDED,
		TDMF_ERROR_BAD_OR_MISSING_REGISTRATION_KEY  = _TDMF_ERROR_CODE_BAD_OR_MISSING_REGISTRATION_KEY,
	} TdmfErrorCode;

	[
		object,
		uuid(462FC17E-6CF6-4AA7-8A2D-DE3FF1102919),
	
		helpstring("IReplicationGroup Interface"),
		pointer_default(unique)
	]
	interface IReplicationGroup : IUnknown
	{
		[propget, helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propget, helpstring("property Parent")] HRESULT Parent([out, retval] IServer** ppServer);
		[propget, helpstring("property TargetName")] HRESULT TargetName([out, retval] BSTR *pVal);
		[propget, helpstring("property State")] HRESULT State([out, retval] ElementState *pVal);
		[propget, helpstring("property Mode")] HRESULT Mode([out, retval] GroupMode *pVal);
		[propput, helpstring("property Mode")] HRESULT Mode([in] GroupMode newVal);
		[propget, helpstring("property Chaining")] HRESULT Chaining([out, retval] BOOL *pVal);
		[propput, helpstring("property Chaining")] HRESULT Chaining([in] BOOL newVal);
		[propget, helpstring("property StateTimeStamp")] HRESULT StateTimeStamp([out, retval] BSTR *pVal);
		[propget, helpstring("property Journal Size")] HRESULT JournalSize([out, retval] BSTR *pVal);
		[propget, helpstring("property DiskTotalSize")] HRESULT DiskTotalSize([out, retval] BSTR *pVal);
		[propget, helpstring("property DiskFreeSize")] HRESULT DiskFreeSize([out, retval] BSTR *pVal);
		[propget, helpstring("property Description")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, helpstring("property Description")] HRESULT Description([in] BSTR newVal);
		[propget, helpstring("property GroupNumber")] HRESULT GroupNumber([out, retval] long *pVal);
		[propput, helpstring("property GroupNumber")] HRESULT GroupNumber([in] long newVal);
		[propget, helpstring("property JournalDirectory")] HRESULT JournalDirectory([out, retval] BSTR *pVal);
		[propput, helpstring("property JournalDirectory")] HRESULT JournalDirectory([in] BSTR newVal);
		[propget, helpstring("property PStoreDirectory")] HRESULT PStoreDirectory([out, retval] BSTR *pVal);
		[propput, helpstring("property PStoreDirectory")] HRESULT PStoreDirectory([in] BSTR newVal);
		[propget, helpstring("property ReplicationPairCount")] HRESULT ReplicationPairCount([out, retval] long *pVal);
		[helpstring("method GetReplicationPair")] HRESULT GetReplicationPair([in] long Index, [out, retval] IReplicationPair** pReplicationPair);
		[helpstring("method RemoveReplicationPair")] HRESULT RemoveReplicationPair([in] IReplicationPair *pReplicationPair);
		[helpstring("method CreateNewReplicationPair")] HRESULT CreateNewReplicationPair([out, retval] IReplicationPair **pReplicationPair);
		[propget, helpstring("property TargetServer")] HRESULT TargetServer([out, retval] IServer** pVal);
		[propputref, helpstring("property TargetServer")] HRESULT TargetServer([in] IServer* newVal);
		[propget, helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
		[helpstring("method IsEqual")] HRESULT IsEqual([in] IReplicationGroup* pRG, [out, retval] BOOL* pbRetVal);
		[propget, helpstring("property ConnectionStatus")] HRESULT ConnectionStatus([out, retval] ConnectionStatus *pVal);
		[propput, helpstring("property ConnectionStatus")] HRESULT ConnectionStatus([in] ConnectionStatus newVal);
		[propget, helpstring("property ChunkDelay")] HRESULT ChunkDelay([out, retval] long *pVal);
		[propput, helpstring("property ChunkDelay")] HRESULT ChunkDelay([in] long newVal);
		[propget, helpstring("property ChunkSize")] HRESULT ChunkSize([out, retval] long *pVal);
		[propput, helpstring("property ChunkSize")] HRESULT ChunkSize([in] long newVal);
		[propget, helpstring("property EnableCompression")] HRESULT EnableCompression([out, retval] BOOL *pVal);
		[propput, helpstring("property EnableCompression")] HRESULT EnableCompression([in] BOOL newVal);
		[propget, helpstring("property Sync")] HRESULT Sync([out, retval] BOOL *pVal);
		[propput, helpstring("property Sync")] HRESULT Sync([in] BOOL newVal);
		[propget, helpstring("property SyncDepth")] HRESULT SyncDepth([out, retval] long *pVal);
		[propput, helpstring("property SyncDepth")] HRESULT SyncDepth([in] long newVal);
		[propget, helpstring("property SyncTimeout")] HRESULT SyncTimeout([out, retval] long *pVal);
		[propput, helpstring("property SyncTimeout")] HRESULT SyncTimeout([in] long newVal);
		[propget, helpstring("property RefreshNeverTimeout")] HRESULT RefreshNeverTimeout([out, retval] BOOL *pVal);
		[propput, helpstring("property RefreshNeverTimeout")] HRESULT RefreshNeverTimeout([in] BOOL newVal);
		[propget, helpstring("property RefreshTimeoutInterval")] HRESULT RefreshTimeoutInterval([out, retval] long *pVal);
		[propput, helpstring("property RefreshTimeoutInterval")] HRESULT RefreshTimeoutInterval([in] long newVal);
		[propget, helpstring("property MaxFileStatSize")] HRESULT MaxFileStatSize([out, retval] long *pVal);
		[propput, helpstring("property MaxFileStatSize")] HRESULT MaxFileStatSize([in] long newVal);
		[propget, helpstring("property PctDone")] HRESULT PctDone([out, retval] long *pVal);
		[helpstring("method SaveToDB")] HRESULT SaveToDB([in] long OldGroupNumber, [in] long nOldTgtHostId, [out] BSTR* WarningsMsg, [out, retval] TdmfErrorCode* pRetVal);
		[helpstring("method LaunchCommand")] HRESULT LaunchCommand([in]TdmfCommand eCmd, [in] BSTR pszOptions, [in] BSTR Log, [in] BOOL Symmetric, [out] BSTR* Message, [out, retval] long *pRetCode	);
		[helpstring("method GetUniqueGroupNumber")] HRESULT GetUniqueGroupNumber([out, retval] long* NewGroupNumber);
		[propget, helpstring("property LastCmdOutput")] HRESULT LastCmdOutput([out, retval] BSTR *pVal);
		[propget, helpstring("property CmdHistory")] HRESULT CmdHistory([out, retval] BSTR *pVal);
		[helpstring("method GetEventFirst")] HRESULT GetEventFirst([out, retval] IEvent** pEvent);
		[propget, helpstring("property IsSource")] HRESULT IsSource([out, retval] BOOL *pVal);
		[helpstring("method GetTargetGroup")] HRESULT GetTargetGroup([out, retval] IReplicationGroup** pVal);
		[helpstring("method CreateAssociatedTargetGroup")] HRESULT CreateAssociatedTargetGroup([out, retval] IReplicationGroup** RGTarget);
		[propget, helpstring("property ReadKbps")] HRESULT ReadKbps([out, retval] BSTR *pVal);
		[propget, helpstring("property WriteKbps")] HRESULT WriteKbps([out, retval] BSTR *pVal);
		[propget, helpstring("property ActualNet")] HRESULT ActualNet([out, retval] BSTR *pVal);
		[propget, helpstring("property EffectiveNet")] HRESULT EffectiveNet([out, retval] BSTR *pVal);
		[propget, helpstring("property BABEntries")] HRESULT BABEntries([out, retval] long *pVal);
		[propget, helpstring("property PctBAB")] HRESULT PctBAB([out, retval] long *pVal);
		[helpstring("method GetEventAt")] HRESULT GetEventAt([in] long nIndex, [out, retval] IEvent** ppEvent);
		[helpstring("method GetEventCount")] HRESULT GetEventCount([out, retval] long* pnRow);
		[helpstring("method IsEventAt")] HRESULT IsEventAt([in] long nIndex, [out, retval] BOOL* pbLoaded);
		[helpstring("method SaveTunables")] HRESULT SaveTunables([out, retval] TdmfErrorCode* RetVal);
		[helpstring("method SetTunables")] HRESULT SetTunables([out, retval] TdmfErrorCode* RetVal);
		[propget, helpstring("property NetThreshold")] HRESULT NetThreshold([out, retval] BOOL *pVal);
		[propput, helpstring("property NetThreshold")] HRESULT NetThreshold([in] BOOL newVal);
		[propget, helpstring("property NetMaxKbps")] HRESULT NetMaxKbps([out, retval] long *pVal);
		[propput, helpstring("property NetMaxKbps")] HRESULT NetMaxKbps([in] long newVal);
		[propget, helpstring("property StatInterval")] HRESULT StatInterval([out, retval] long *pVal);
		[propput, helpstring("property StatInterval")] HRESULT StatInterval([in] long newVal);
		[propget, helpstring("property JournalLess")] HRESULT JournalLess([out, retval] BOOL *pVal);
		[propput, helpstring("property JournalLess")] HRESULT JournalLess([in] BOOL newVal);
		[helpstring("method IsTargetDHCPAdressUsed")] HRESULT IsTargetDHCPAdressUsed([out, retval] BOOL* pbRetVal);
		[helpstring("method SetTargetDHCPAddressUsed")] HRESULT SetTargetDHCPAddressUsed([in] BOOL bVal);
		[helpstring("method IsPrimaryDHCPAdressUsed")] HRESULT IsPrimaryDHCPAdressUsed([out, retval] BOOL* pbRetVal);
		[helpstring("method IsPrimaryEditedIPUsed")] HRESULT IsPrimaryEditedIPUsed([out, retval] BOOL* pbRetVal);
		[helpstring("method IsTargetEditedIPUsed")] HRESULT IsTargetEditedIPUsed([out, retval] BOOL* pbRetVal);
		[helpstring("method SetPrimaryDHCPAddressUsed")] HRESULT SetPrimaryDHCPAddressUsed(BOOL bVal);
		[propget, helpstring("property PrimaryName")] HRESULT PrimaryName([out, retval] BSTR *pVal);
		[helpstring("method SetPrimaryEditedAddressUsed")] HRESULT SetPrimaryEditedAddressUsed([in] BOOL bVal);
		[helpstring("method SetTargetEditedAddressUsed")] HRESULT SetTargetEditedAddressUsed([in] BOOL bVal);
		[helpstring("method LockCmds")] HRESULT LockCmds();
		[helpstring("method UnlockCmds")] HRESULT UnlockCmds();
		[propget, helpstring("property IsLockCmds")] HRESULT IsLockCmds([out, retval] BOOL *pVal);
		[propget, helpstring("property Throttles")] HRESULT Throttles([out, retval] BSTR *pVal);
		[propget, helpstring("property PrimaryEditedIP")] HRESULT PrimaryEditedIP([out, retval] BSTR *pVal);
		[propput, helpstring("property PrimaryEditedIP")] HRESULT PrimaryEditedIP([in] BSTR newVal);
		[propget, helpstring("property TargetEditedIP")] HRESULT TargetEditedIP([out, retval] BSTR *pVal);
		[propput, helpstring("property TargetEditedIP")] HRESULT TargetEditedIP([in] BSTR newVal);
		[propget, helpstring("property ForcePMDRestart")] HRESULT ForcePMDRestart([out, retval] BOOL *pVal);
		[propput, helpstring("property ForcePMDRestart")] HRESULT ForcePMDRestart([in] BOOL newVal);
		[propget, helpstring("property Symmetric")] HRESULT Symmetric([out, retval] BOOL *pVal);
		[propput, helpstring("property Symmetric")] HRESULT Symmetric([in] BOOL newVal);
		[helpstring("method RemoveSymmetricGroup")] HRESULT RemoveSymmetricGroup();
		[propget, helpstring("property SymmetricGroupNumber")] HRESULT SymmetricGroupNumber([out, retval] long *pVal);
		[propput, helpstring("property SymmetricGroupNumber")] HRESULT SymmetricGroupNumber([in] long newVal);
		[propget, helpstring("property SymmetricNormallyStarted")] HRESULT SymmetricNormallyStarted([out, retval] BOOL *pVal);
		[propput, helpstring("property SymmetricNormallyStarted")] HRESULT SymmetricNormallyStarted([in] BOOL newVal);
		[propget, helpstring("property FailoverInitialState")] HRESULT FailoverInitialState([out, retval] long *pVal);
		[propput, helpstring("property FailoverInitialState")] HRESULT FailoverInitialState([in] long newVal);
		[propget, helpstring("property SymmetricConnectionStatus")] HRESULT SymmetricConnectionStatus([out, retval] ConnectionStatus *pVal);
		[propget, helpstring("property SymmetricMode")] HRESULT SymmetricMode([out, retval] GroupMode *pVal);
		[helpstring("method Failover")] HRESULT Failover([out] long* Warning, [out, retval] long* Result);
		[propget, helpstring("property SymmetricPStore")] HRESULT SymmetricPStore([out, retval] BSTR *pVal);
		[propput, helpstring("property SymmetricPStore")] HRESULT SymmetricPStore([in] BSTR newVal);
		[propget, helpstring("property SymmetricJournal")] HRESULT SymmetricJournal([out, retval] BSTR *pVal);
		[propput, helpstring("property SymmetricJournal")] HRESULT SymmetricJournal([in] BSTR newVal);
	};

	[
		object,
		uuid(00AB5DB9-7080-402E-AF5E-08E74F8BF099),
	
		helpstring("IServer Interface"),
		pointer_default(unique)
	]
	interface IServer : IUnknown
	{
		[propget, helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propget, helpstring("property ReplicationGroupCount")] HRESULT ReplicationGroupCount([out, retval] long *pVal);
		[helpstring("method GetReplicationGroup")] HRESULT GetReplicationGroup([in] long Index, [out, retval] IReplicationGroup** ppReplicationGroup);
		[propget, helpstring("property Parent")] HRESULT Parent([out, retval] IDomain** ppDomain);
		[helpstring("method CreateNewReplicationGroup")] HRESULT CreateNewReplicationGroup([out, retval] IReplicationGroup** ppReplicationGroup);
		[helpstring("method MoveTo")] HRESULT MoveTo([in] IDomain* pDomain, [out, retval] long *pVal);
		[helpstring("method RemoveReplicationGroup")] HRESULT RemoveReplicationGroup([in] IReplicationGroup* pReplicationGroup, [out, retval] long* pRetVal);
		[helpstring("method LaunchCommand")] HRESULT LaunchCommand([in]TdmfCommand eCmd, [in] BSTR pszOptions, [in] BSTR Log, [out] BSTR* Message, [out, retval] long *pRetCode	);
		[propget, helpstring("property IPAddress")] HRESULT IPAddress([in] long Index, [out, retval] BSTR *pVal);
		[propget, helpstring("property OSType")] HRESULT OSType([out, retval] BSTR *pVal);
		[propget, helpstring("property OSVersion")] HRESULT OSVersion([out, retval] BSTR *pVal);
		[propget, helpstring("property AgentVersion")] HRESULT AgentVersion([out, retval] BSTR *pVal);
		[propget, helpstring("property KeyExpirationDate")] HRESULT KeyExpirationDate([out, retval] BSTR *pVal);
		[propget, helpstring("property State")] HRESULT State([out, retval] ElementState *pVal);
		[propget, helpstring("property BABSize")] HRESULT BABSize([out, retval] long *pVal);
		[propput, helpstring("property BABSize")] HRESULT BABSize([in] long newVal);
		[propget, helpstring("property PStoreDirectory")] HRESULT PStoreDirectory([out, retval] BSTR *pVal);
		[propput, helpstring("property PStoreDirectory")] HRESULT PStoreDirectory([in] BSTR newVal);
		[propget, helpstring("property TCPWndSize")] HRESULT TCPWndSize([out, retval] long *pVal);
		[propput, helpstring("property TCPWndSize")] HRESULT TCPWndSize([in] long newVal);
		[propget, helpstring("property Port")] HRESULT Port([out, retval] long *pVal);
		[propput, helpstring("property Port")] HRESULT Port([in] long newVal);
		[propget, helpstring("property Key")] HRESULT Key([out, retval] long *pVal);
		[propget, helpstring("property Description")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, helpstring("property Description")] HRESULT Description([in] BSTR newVal);
		[propget, helpstring("property HostID")] HRESULT HostID([out, retval] long *pVal);
		[propget, helpstring("property RAMSize")] HRESULT RAMSize([out, retval] long *pVal);
		[propget, helpstring("property RegKey")] HRESULT RegKey([out, retval] BSTR *pVal);
		[propput, helpstring("property RegKey")] HRESULT RegKey([in] BSTR newVal);
		[helpstring("method IsEqual")] HRESULT IsEqual([in] IServer* pServer, [out, retval] BOOL* pbRetVal);
		[propget, helpstring("property Connected")] HRESULT Connected([out, retval] BOOL *pVal);
		[propget, helpstring("property PctBAB")] HRESULT PctBAB([out, retval] long *pVal);
		[propget, helpstring("property BABEntries")] HRESULT BABEntries([out, retval] long *pVal);
		[propget, helpstring("property PerformanceNotifications")] HRESULT PerformanceNotifications([out, retval] BOOL *pVal);
		[propput, helpstring("property PerformanceNotifications")] HRESULT PerformanceNotifications([in] BOOL newVal);
		[propget, helpstring("property TargetReplicationGroupCount")] HRESULT TargetReplicationGroupCount([out, retval] long *pVal);
		[propget, helpstring("property JournalDirectory")] HRESULT JournalDirectory([out, retval] BSTR *pVal);
		[propput, helpstring("property JournalDirectory")] HRESULT JournalDirectory([in] BSTR newVal);
		[propget, helpstring("property ReplicationPairCount")] HRESULT ReplicationPairCount([out, retval] long *pVal);
		[propget, helpstring("property TargetReplicationPairCount")] HRESULT TargetReplicationPairCount([out, retval] long *pVal);
		[helpstring("method GetEventFirst")] HRESULT GetEventFirst([out, retval] IEvent** pEvent);
		[helpstring("method SaveToDB")] HRESULT SaveToDB([out, retval] TdmfErrorCode* pRetVal);
		[helpstring("method GetDeviceList")] HRESULT GetDeviceList([out, retval] IDeviceList** pDeviceList);
		[helpstring("method GetDeviceLists")] HRESULT GetDeviceLists([in] IServer* pServerTarget, [out] IDeviceList** pDeviceList, [out] IDeviceList** pDeviceListTarget);
		[propget, helpstring("property BABSizeAllocated")] HRESULT BABSizeAllocated([out, retval] long *pVal);
		[helpstring("method GetPerformanceValues")] HRESULT GetPerformanceValues([in] BSTR Stats, [in] DATE DateBegin, [in] DATE DateEnd, [out, retval] BSTR* RetVal);
		[propget, helpstring("property LastCmdOutput")] HRESULT LastCmdOutput([out, retval] BSTR *pVal);
		[propget, helpstring("property PStoreSize")] HRESULT PStoreSize([out, retval] BSTR *pVal);
		[propget, helpstring("property JournalSize")] HRESULT JournalSize([in] long Index, [out, retval] BSTR *pVal);
		[propget, helpstring("property CmdHistory")] HRESULT CmdHistory([out, retval] BSTR *pVal);
		[propget, helpstring("property JournalDriveCount")] HRESULT JournalDriveCount([out, retval] long *pVal);
		[propget, helpstring("property JournalDrive")] HRESULT JournalDrive([in] long Index, [out, retval] BSTR *pVal);
		[propget, helpstring("property JournalDiskSize")] HRESULT JournalDiskSize([in] long Index, [out, retval] BSTR *pVal);
		[propget, helpstring("property JournalDiskFreeSize")] HRESULT JournalDiskFreeSize([in] long Index, [out, retval] BSTR *pVal);
		[helpstring("method GetEventAt")] HRESULT GetEventAt([in] long nIndex, [out, retval] IEvent** ppEvent);
		[helpstring("method GetEventCount")] HRESULT GetEventCount([out, retval] long* pnRow);
		[helpstring("method IsEventAt")] HRESULT IsEventAt([in] long nIndex, [out, retval] BOOL* pbLoaded);
		[helpstring("method Import")] HRESULT Import([out] BSTR* Message, [out, retval] long* ErrCode);
		[propget, helpstring("property IPAddressCount")] HRESULT IPAddressCount([out, retval] long *pVal);
		[helpstring("method CreateScriptServerFile")] HRESULT CreateScriptServerFile([out,retval]IScriptServerFile**ppScriptServerFile);
		[helpstring("method GetScriptServerFileCount")] HRESULT GetScriptServerFileCount([out,retval]long *pVal);
		[helpstring("method GetScriptServerFile")] HRESULT GetScriptServerFile([in] long Index,[out,retval] IScriptServerFile** ppScriptServerFile);
		[helpstring("method RemoveScriptServerFile")] HRESULT RemoveScriptServerFile([in] long nScriptServerID, [out,retval] long *pRetVal);
		[helpstring("method ImportAllScriptServerFiles")] HRESULT ImportAllScriptServerFiles([in] BOOL OverwriteExistingFile,[in] BSTR strExtension);
		[helpstring("method ImportOneScriptServerFile")] HRESULT ImportOneScriptServerFile([in] BSTR strFilename);
		[helpstring("method LockCmds")] HRESULT LockCmds();
		[helpstring("method UnlockCmds")] HRESULT UnlockCmds();
		[propget, helpstring("property IsLockCmds")] HRESULT IsLockCmds([out, retval] BOOL *pVal);
		[propget, helpstring("property NbrCPU")] HRESULT NbrCPU([out, retval] long *pVal);
		[propput, helpstring("property NbrCPU")] HRESULT NbrCPU([in] long newVal);
		[propget, helpstring("property ReplicationPort")] HRESULT ReplicationPort([out, retval] long *pVal);
		[propput, helpstring("property ReplicationPort")] HRESULT ReplicationPort([in] long newVal);
	};

	[
		object,
		uuid(BE340E60-C044-4A96-9F32-139FA514B7AF),
	
		helpstring("IDomain Interface"),
		pointer_default(unique)
	]
	interface IDomain : IUnknown
	{
		[propget, helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, helpstring("property ServerCount")] HRESULT ServerCount([out, retval] long *pVal);
		[helpstring("method GetServer")] HRESULT GetServer([in] long Index, [out, retval] IServer** ppServer);
		[helpstring("method CreateNewServer")] HRESULT CreateNewServer([out, retval] IServer** ppServer);
		[propget, helpstring("property Parent")] HRESULT Parent([out, retval] ISystem* *pVal);
		[helpstring("method RemoveServer")] HRESULT RemoveServer([in] IServer* pServer, [out, retval] long* pRetVal);
		[propget, helpstring("property Description")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, helpstring("property Description")] HRESULT Description([in] BSTR newVal);
		[propget, helpstring("property State")] HRESULT State([out, retval] ElementState *pVal);
		[propget, helpstring("property Key")] HRESULT Key([out, retval] long *pVal);
		[helpstring("method IsEqual")] HRESULT IsEqual([in] IDomain* pDomain, [out, retval] BOOL* pbRetVal);
		[helpstring("method SaveToDB")] HRESULT SaveToDB([out, retval] TdmfErrorCode* pRetVal);
	};

	[
		object,
		uuid(7B16FE9B-26D0-4CEE-AE11-CD45F12085C1),
		helpstring("ISystem Interface"),
		pointer_default(unique)
	]
	interface ISystem : IUnknown
	{
		[propget, helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, helpstring("property Name")] HRESULT Name([in] BSTR Val);
		[propget, helpstring("property DomainCount")] HRESULT DomainCount([out, retval] long *pVal);
		[helpstring("method GetDomain")] HRESULT GetDomain([in] long Index, [out, retval] IDomain** pDomain);
		[id(1), helpstring("method CreateNewDomain")] HRESULT CreateNewDomain([out, retval] IDomain** ppNewDomain);
		[id(2), helpstring("method RemoveDomain")] HRESULT RemoveDomain([in] IDomain* pDomain, [out, retval] long *pRetVal);
		[id(4), helpstring("method Refresh")] HRESULT Refresh([out, retval] long* pErr);
		[id(5), helpstring("method Init")] HRESULT Init([in] long HWND, [out, retval] long* pErr);
		[id(7), helpstring("method Uninitialize")] HRESULT Uninitialize();
		[id(8), helpstring("method Description")] HRESULT GetDescription([out] BSTR *pDatabase, [out] BSTR *pVersion, [out] BSTR *pIP, [out] BSTR *pPort, [out] BSTR *pHostId);
		[id(9), helpstring("method GetEventFirst")] HRESULT GetEventFirst([out, retval] IEvent ** pEvent);
		[id(11), helpstring("method GetLastCommandOutput")] HRESULT GetLastCommandOutput([out, retval] BSTR* pCmdOutput);
		[id(12), helpstring("method RequestOwnership")] HRESULT RequestOwnership([in] BOOL bRequest);
		[id(13), helpstring("method Open")] HRESULT Open([in] BSTR bstrDSN, [out, retval] long* pErr);
		[id(14), helpstring("method GetTableSize")] HRESULT GetTableSize([in] TdmfDBTable Table, [out] long* pCount, [out, retval] BSTR *pVal);
		[id(15), helpstring("method DeleteTableRecords")] HRESULT DeleteTableRecords([in] TdmfDBTable Table);
		[id(16), helpstring("method GetDeleteRecords")] HRESULT GetDeleteRecords([in] TdmfDBTable Table, [out] long *pDays, [out] long *pNbRecords);
		[id(17), helpstring("method SetDeleteRecords")] HRESULT SetDeleteRecords([in] TdmfDBTable Table, [in] long days, [in] long NbRecords);
		[id(18), helpstring("method GetNbCommandMenuEntries")] HRESULT GetNbCommandMenuEntries([in] BSTR Key, [out, retval] long* Nb);
		[id(19), helpstring("method GetCommandMenuEntryName")] HRESULT GetCommandMenuEntryName([in] BSTR Key, [in] long Index, [out, retval] BSTR* Name);
		[id(20), helpstring("method GetCommandMenuEntryId")] HRESULT GetCommandMenuEntryId([in] BSTR Key, [in] long Index, [out, retval] long* Id);
		[id(21), helpstring("method IsCommandMenuEntryEnabled")] HRESULT IsCommandMenuEntryEnabled([in] BSTR key, [in] long Index, [in] long Mode, [in] long ConnectionStatus, [in] long Platform, [out, retval] BOOL* Enabled);
		[id(22), helpstring("method GetCommandMenuString")] HRESULT GetCommandMenuString([in] BSTR Key, [in] long Id, [out, retval] BSTR* Val);
		[propget, id(23), helpstring("property TraceLevel")] HRESULT TraceLevel([out, retval] short *pVal);
		[propput, id(23), helpstring("property TraceLevel")] HRESULT TraceLevel([in] short newVal);
		[propget, id(24), helpstring("property UserID")] HRESULT UserID([out, retval] BSTR *pVal);
		[propput, id(24), helpstring("property UserID")] HRESULT UserID([in] BSTR newVal);
		[propget, id(25), helpstring("property Password")] HRESULT Password([out, retval] BSTR *pVal);
		[propput, id(25), helpstring("property Password")] HRESULT Password([in] BSTR newVal);
		[id(26), helpstring("method GetEventAt")] HRESULT GetEventAt([in] long nIndex, [out, retval] IEvent** ppEvent);
		[id(27), helpstring("method GetEventCount")] HRESULT GetEventCount([out, retval] long* pnRow);
		[id(28), helpstring("method IsEventAt")] HRESULT IsEventAt([in] long nIndex, [out, retval] BOOL* pbLoaded);
		[propget, id(29), helpstring("property UserRole")] HRESULT UserRole([out, retval] BSTR *pVal);
		[id(30), helpstring("method GetFirstUser")] HRESULT GetFirstUser([out]BSTR* Location, [out] BSTR* UserName, [out] BSTR* Type, [out] BSTR* App);
		[id(31), helpstring("method GetNextUser")] HRESULT GetNextUser([out]BSTR* Location, [out] BSTR* UserName, [out] BSTR* Type, [out] BSTR* App);
		[id(32), helpstring("method AlreadyExistDomain")] HRESULT AlreadyExistDomain([in] BSTR Name, [in] long lKey, [out, retval] BOOL *pRet);
		[id(33), helpstring("method SendTextMessage")] HRESULT SendTextMessage([in] BSTR Msg);
		[id(34), helpstring("method GetCollectorStats")] HRESULT GetCollectorStats([out, retval] ICollectorStats** pICollectorStats);
		[id(35), helpstring("method SetCollectorStats")] HRESULT SetCollectorStats([in] ICollectorStats * pICollectorStats);
		[propget, id(36), helpstring("property LogUsersActions")] HRESULT LogUsersActions([out, retval] BOOL *pVal);
		[propput, id(36), helpstring("property LogUsersActions")] HRESULT LogUsersActions([in] BOOL newVal);
		[id(37), helpstring("method GetFirstLogMsg")] HRESULT GetFirstLogMsg([out] BSTR* Date, [out] BSTR* Source, [out] BSTR* User, [out] BSTR* Msg);
		[id(38), helpstring("method GetNextLogMsg")] HRESULT GetNextLogMsg([out] BSTR* Date, [out] BSTR* Source, [out] BSTR* User, [out] BSTR* Msg);
		[id(39), helpstring("method DeleteAllLogMsg")] HRESULT DeleteAllLogMsg([out, retval] BOOL* bRet);
		[id(40), helpstring("method GetFirstKeyLogMsg")] HRESULT GetFirstKeyLogMsg([out] BSTR* Date, [out] BSTR* Hostname, [out] long* HostId, [out] BSTR* RegKey, [out] BSTR* ExpDate);
		[id(41), helpstring("method GetNextKeyLogMsg")] HRESULT GetNextKeyLogMsg([out] BSTR* Date, [out] BSTR* Hostname, [out] long* HostId, [out] BSTR* RegKey, [out] BSTR* ExpDate);
		[id(42), helpstring("method SetDeleteDelay")] HRESULT SetDeleteDelay([in] long value);
		[id(43), helpstring("method GetDeleteDelay")] HRESULT GetDeleteDelay([out, retval] long* pValue);
		[helpstring("method GetUserCount")] HRESULT GetUserCount( [out, retval] long* pCount);
		[helpstring("method SetTimeOutToDB")] HRESULT SetTimeOutToDB();
		[helpstring("method GetTimeOutFromDB")] HRESULT GetTimeOutFromDB();
		[helpstring("method GetTimeOut")] HRESULT GetTimeOut([in] int nIndex, [out, retval] long* pValue);
		[helpstring("method SetTimeOut")] HRESULT SetTimeOut([in] int nIndex, [in] int nValue);
		[propget, helpstring("property IsLockCmds")] HRESULT IsLockCmds([out, retval] BOOL *pVal);
	};
	[
		object,
		uuid(024301AB-0C80-4FB6-B344-B6958E88AAC2),
	
		helpstring("IEvent Interface"),
		pointer_default(unique)
	]
	interface IEvent : IUnknown
	{
		[propget, helpstring("property Date")] HRESULT Date([out, retval] BSTR *pVal);
		[propget, helpstring("property Time")] HRESULT Time([out, retval] BSTR *pVal);
		[propget, helpstring("property Source")] HRESULT Source([out, retval] BSTR *pVal);
		[propget, helpstring("property Description")] HRESULT Description([out, retval] BSTR *pVal);
		[propget, helpstring("property Severity")] HRESULT Severity([out, retval] long *pVal);
		[propget, helpstring("property Type")] HRESULT Type([out, retval] BSTR *pVal);
		[propget, helpstring("property GroupID")] HRESULT GroupID([out, retval] long *pVal);
		[propget, helpstring("property PairID")] HRESULT PairID([out, retval] long *pVal);
	};
	[
		object,
		uuid(0965E9D3-DF85-4A97-8EEB-B2D55E1BBF8E),
	
		helpstring("IReplicationPair Interface"),
		pointer_default(unique)
	]
	interface IReplicationPair : IUnknown
	{
		[propget, helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propget, helpstring("property Description")] HRESULT Description([out, retval] BSTR *pVal);
		[propput, helpstring("property Description")] HRESULT Description([in] BSTR newVal);
		[propget, helpstring("property PairNumber")] HRESULT PairNumber([out, retval] long *pVal);
		[propput, helpstring("property PairNumber")] HRESULT PairNumber([in] long newVal);
		[propget, helpstring("property Parent")] HRESULT Parent([out, retval] IReplicationGroup* *pVal);
		[propget, helpstring("property SrcSize")] HRESULT SrcSize([out, retval] BSTR *pVal);
		[propput, helpstring("property SrcSize")] HRESULT SrcSize([in] BSTR newVal);
		[propget, helpstring("property TgtSize")] HRESULT TgtSize([out, retval] BSTR *pVal);
		[propput, helpstring("property TgtSize")] HRESULT TgtSize([in] BSTR newVal);
		[propget, helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
		[helpstring("method IsEqual")] HRESULT IsEqual([in] IReplicationPair* pRP, [out, retval] BOOL* pbRetVal);
		[propget, helpstring("property FileSystem")] HRESULT FileSystem([out, retval] BSTR *pVal);
		[propput, helpstring("property FileSystem")] HRESULT FileSystem([in] BSTR newVal);
		[propget, helpstring("property SrcName")] HRESULT SrcName([out, retval] BSTR *pVal);
		[propput, helpstring("property SrcName")] HRESULT SrcName([in] BSTR newVal);
		[propget, helpstring("property TgtName")] HRESULT TgtName([out, retval] BSTR *pVal);
		[propput, helpstring("property TgtName")] HRESULT TgtName([in] BSTR newVal);
		[propget, helpstring("property ObjectState")] HRESULT ObjectState([out, retval] ReplicationPairObjectState *pVal);
		[propput, helpstring("property ObjectState")] HRESULT ObjectState([in] ReplicationPairObjectState newVal);
		[helpstring("method CopyDevice")] HRESULT CopyDevice([in] BOOL bSourceServer, [in] IDevice* pDevice );
	};
	[
		object,
		uuid(48B0BA27-D29A-4C04-9E72-02A03863ADFB),
	
		helpstring("IDevice Interface"),
		pointer_default(unique)
	]
	interface IDevice : IUnknown
	{
		[propget, helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propget, helpstring("property Size")] HRESULT Size([out, retval] BSTR *pVal);
		[propget, helpstring("property FileSystem")] HRESULT FileSystem([out, retval] BSTR *pVal);
		[propget, helpstring("property DriveId")] HRESULT DriveId([out, retval] BSTR *pVal);
		[propget, helpstring("property StartOff")] HRESULT StartOff([out, retval] BSTR *pVal);
		[propget, helpstring("property CanBeSource")] HRESULT CanBeSource([out, retval] VARIANT_BOOL* pVal);
		[propget, helpstring("property CanBeTarget")] HRESULT CanBeTarget([out, retval] VARIANT_BOOL* pVal);
	};
	[
		object,
		uuid(0461B3F5-A69D-4CE5-B8E3-DA6A2087E5DF),
	
		helpstring("IDeviceList Interface"),
		pointer_default(unique)
	]
	interface IDeviceList : IUnknown
	{
		[propget, helpstring("property DeviceCount")] HRESULT DeviceCount([out, retval] long *pVal);
		[helpstring("method GetDevice")] HRESULT GetDevice([in] long index, [out, retval] IDevice** pDevice);
	};

	[
		object,
		uuid(F8DB1D2F-1154-406B-A9F0-1577D3FC07EA),
	
		helpstring("ICollectorStats Interface"),
		pointer_default(unique)
	]
	interface ICollectorStats : IUnknown
	{

		[helpstring("method GetDBMsgPerHour")] HRESULT GetDBMsgPerHour([out, retval] unsigned long * pVal);
		[helpstring("method GetDBMsgPerMin")] HRESULT GetDBMsgPerMin([out,retval] unsigned long* pVal);
		[helpstring("method GetDBMsgPending")] HRESULT GetDBMsgPending([out,retval] unsigned long* pVal);
		[helpstring("method GetThrdPerHour")] HRESULT GetThrdPerHour([out,retval] unsigned long* pVal);
		[helpstring("method GetThrdPerMin")] HRESULT GetThrdPerMin([out,retval] unsigned long* pVal);
		[helpstring("method GetThrdPending")] HRESULT GetThrdPending([out,retval] unsigned long* pVal);
		[helpstring("method GetAgentsAlive")] HRESULT GetAgentsAlive([out,retval] unsigned long* pVal);
		[helpstring("method GetAliveMsgPerMin")] HRESULT GetAliveMsgPerMin([out,retval] unsigned long* pVal);
		[helpstring("method GetAliveMsgPerHour")] HRESULT GetAliveMsgPerHour([out,retval] unsigned long* pVal);
		[helpstring("method GetTimeCollector")] HRESULT GetTimeCollector([out,retval] long* pTime);
		[helpstring("method GetMsg_GetLGConfig")] HRESULT GetMsg_GetLGConfig([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_SetLGConfig")] HRESULT GetMsg_SetLGConfig([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_AgentInfoRequest")] HRESULT GetMsg_AgentInfoRequest([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_AgentInfo")] HRESULT GetMsg_AgentInfo([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_RegistrationKey")] HRESULT GetMsg_RegistrationKey([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_TDMFCmd")] HRESULT GetMsg_TDMFCmd([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_SetAgenGenConfig")] HRESULT GetMsg_SetAgenGenConfig([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_GetAgentGenConfig")] HRESULT GetMsg_GetAgentGenConfig([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_SetAllDevices")] HRESULT GetMsg_SetAllDevices([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_GetAllDevices")] HRESULT GetMsg_GetAllDevices([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_AlertData")] HRESULT GetMsg_AlertData([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_StatusMsg")] HRESULT GetMsg_StatusMsg([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_PerfMsg")] HRESULT GetMsg_PerfMsg([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_PerfCfgMsg")] HRESULT GetMsg_PerfCfgMsg([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_MonitoringDataReg")] HRESULT GetMsg_MonitoringDataReg([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_AgentAliveSocket")] HRESULT GetMsg_AgentAliveSocket([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_GroupState")] HRESULT GetMsg_GroupState([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_GroupMonitoring")] HRESULT GetMsg_GroupMonitoring([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_TDMFCommonGuiReg")] HRESULT GetMsg_TDMFCommonGuiReg([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_SetDBParams")] HRESULT GetMsg_SetDBParams([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_GetDBParams")] HRESULT GetMsg_GetDBParams([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_AgentState")] HRESULT GetMsg_AgentState([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_GuiMsg")] HRESULT GetMsg_GuiMsg([out,retval] unsigned long* pVal);
		[helpstring("method GetMsg_Default")] HRESULT GetMsg_Default([out,retval] unsigned long* pVal);
	};
	[
		object,
		uuid(DEF5FBF5-2C4E-45EF-B178-48ADD1F4C7D2),
	
		helpstring("IScriptServerFile Interface"),
		pointer_default(unique)
	]
	interface IScriptServerFile : IUnknown
	{
		[propget, helpstring("property ScriptServerID")] HRESULT ScriptServerID([out, retval] long *pVal);
		[propput, helpstring("property ScriptServerID")] HRESULT ScriptServerID([in] long newVal);
		[propget, helpstring("property ParentServerID")] HRESULT ParentServerID([out, retval] long *pVal);
		[propput, helpstring("property ParentServerID")] HRESULT ParentServerID([in] long newVal);
		[propget, helpstring("property FileName")] HRESULT FileName([out, retval] BSTR *pVal);
		[propput, helpstring("property FileName")] HRESULT FileName([in] BSTR newVal);
		[propget, helpstring("property Extension")] HRESULT Extension([out, retval] BSTR *pVal);
		[propput, helpstring("property Extension")] HRESULT Extension([in] BSTR newVal);
		[propget, helpstring("property Type")] HRESULT Type([out, retval] BSTR *pVal);
		[propput, helpstring("property Type")] HRESULT Type([in] BSTR newVal);
		[propget, helpstring("property Content")] HRESULT Content([out, retval] BSTR *pVal);
		[propput, helpstring("property Content")] HRESULT Content([in] BSTR newVal);
		[propget, helpstring("property CreationDate")] HRESULT CreationDate([out, retval] BSTR *pVal);
		[propput, helpstring("property CreationDate")] HRESULT CreationDate([in] BSTR newVal);
		[propget, helpstring("property ModificationDate")] HRESULT ModificationDate([out, retval] BSTR *pVal);
		[propput, helpstring("property ModificationDate")] HRESULT ModificationDate([in] BSTR newVal);
		[helpstring("method ParentServer")] HRESULT ParentServer([out,retval]IServer** pServer);
		[helpstring("method SaveToDB")] HRESULT SaveToDB([out,retval] TdmfErrorCode* pRetVal);
		[helpstring("method SendScriptServerFileToAgent")] HRESULT SendScriptServerFileToAgent([out,retval] TdmfErrorCode* pRetVal);
		[helpstring("method IsNew")] HRESULT IsNew([out, retval ] BOOL* pVal);
		[propget, helpstring("property New")] HRESULT New([out, retval] BOOL *pVal);
		[propput, helpstring("property New")] HRESULT New([in] BOOL newVal);
	};

[
	uuid(B15F8DB8-7BC4-4643-8880-3FB191E335BF),
	version(1.0),
	helpstring("TDMFObjects 1.0 Type Library")
]
library TDMFOBJECTSLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(EB789DA6-9310-48D9-816E-21A881E8C4EC),
		helpstring("System Class")
	]
	coclass System
	{
		[default] interface ISystem;
	};
	[
		uuid(90B427FA-3CDF-4916-B011-727575F6449F),
		helpstring("Domain Class")
	]
	coclass Domain
	{
		[default] interface IDomain;
	};
	[
		uuid(7A57D5E4-D9EE-49D4-895B-9F69160A878D),
		helpstring("Server Class")
	]
	coclass Server
	{
		[default] interface IServer;
	};
	[
		uuid(5F312BE9-081F-44D7-A452-E6064B847BC0),
		helpstring("ReplicationGroup Class")
	]
	coclass ReplicationGroup
	{
		[default] interface IReplicationGroup;
	};
	[
		uuid(638D9ADF-F14D-4493-810C-217EC91C7153),
		helpstring("Event Class")
	]
	coclass Event
	{
		[default] interface IEvent;
	};
	[
		uuid(CF713935-B8F4-4689-80C5-463A6325E4A2),
		helpstring("ReplicationPair Class")
	]
	coclass ReplicationPair
	{
		[default] interface IReplicationPair;
	};
	[
		uuid(4907EDCF-E621-4F33-A507-11ADBF335415),
		helpstring("Device Class")
	]
	coclass Device
	{
		[default] interface IDevice;
	};
	[
		uuid(156D4CFF-7C0A-46A4-A9AC-F5F515304637),
		helpstring("DeviceList Class")
	]
	coclass DeviceList
	{
		[default] interface IDeviceList;
	};


	[
		uuid(D4152A05-1022-4915-B928-09F3F7A4DA44),
		helpstring("ComCollectorStats Class")
	]
	coclass ComCollectorStats
	{
		[default] interface ICollectorStats;
	};

	[
		uuid(28BDE7D3-8C77-4113-AAAD-7525B930C56B),
		helpstring("ScriptServerFile Class")
	]
	coclass ScriptServerFile
	{
		[default] interface IScriptServerFile;
	};
};
