 
//---------------------------------------------------------------------------
// The Installing event is sent after the component Data Collector and TDMF Database
// is installed.
//---------------------------------------------------------------------------
 
export prototype DataCollectorandTDMFDatabase_Installed(); 

function DataCollectorandTDMFDatabase_Installed()
  string RegKey; 
  string ComputerName;  
  string PathForDBFiles;
  number ComputerNameSize; 
  number Result;
  number FileHandle;
begin 
  // Set Registry Entries
  RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
  RegKey = "SOFTWARE\\Softek\\Dtc\\CurrentVersion";
  Disable(LOGGING); // because these are shared between the collector and the console
  if (RegDBKeyExist(RegKey) < 0) then
    RegDBCreateKeyEx(RegKey, "");
  endif;      
  Enable(LOGGING);   
  RegDBSetKeyValueEx(RegKey, "InstallPath", REGDB_STRING, TARGETDIR, -1); 
  ComputerNameSize = 101;
  GetComputerName(ComputerName, ComputerNameSize);
  RegDBSetKeyValueEx(RegKey, "DtcdbServer", REGDB_STRING, ComputerName ^ "DTC", -1);
  RegDBSetKeyValueEx(RegKey, "TraceLevel",  REGDB_NUMBER, "1", -1);
  RegDBSetKeyValueEx(RegKey, "TraceFlag",   REGDB_NUMBER, "1", -1);
  RegDBSetKeyValueEx(RegKey, "TraceMMP",    REGDB_NUMBER, "0", -1);    
  RegDBSetKeyValueEx(RegKey, "DtcIP",       REGDB_STRING, DtcIPAddress, -1);
  RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
  RegKey = "SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application\\" + EventLogSourceName;   
  RegDBSetKeyValueEx(RegKey, "EventMessageFile", REGDB_STRING, WINSYSDIR ^ "DtcLogMsg.dll", -1);
  RegDBSetKeyValueEx(RegKey, "TypesSupported",   REGDB_NUMBER, "7", -1); // dword:00000007 
end;

//---------------------------------------------------------------------------
// The Installing event is sent after the component Common Console
// is installed.
//---------------------------------------------------------------------------
 
export prototype CommonConsole_Installed();

function CommonConsole_Installed()
  string RegKey; 
begin
  // Set Registry Entries
  RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
  RegKey = "SOFTWARE\\Softek\\Dtc\\CurrentVersion";
  Disable(LOGGING); // because these are shared between the collector and the console
  if (RegDBKeyExist(RegKey) < 0) then
    RegDBCreateKeyEx(RegKey, "");
  endif;      
  Enable(LOGGING);   
  RegDBSetKeyValueEx(RegKey, "InstallPath",       REGDB_STRING, TARGETDIR, -1); 
  RegDBSetKeyValueEx(RegKey, "DtcCollectorIP",   REGDB_STRING, CollectorIPAddress, -1); 
  RegDBSetKeyValueEx(RegKey, "DtcCollectorPort", REGDB_NUMBER, CollectorPortNb, -1);  
  RegDBSetKeyValueEx(RegKey, "DtcdbServer",      REGDB_STRING, CollectorComputerName ^ "DTC", -1);
  RegDBSetKeyValueEx(RegKey, "DtcHelpFile",      REGDB_STRING, TARGETDIR ^ "Replicator.chm", -1);
  
  if (XCopyFile(SRCDIR ^ "Help Files\\Replicator.chm", TARGETDIR, COMP_UPDATE_DATE | LOCKEDFILE) != 0) then
    MessageBox(HelpFileCopyError, SEVERE);
    CriticalErrorOccured = TRUE;
  endif;
  // Note that context menu registry entries are set using a registry set
end;

//---------------------------------------------------------------------------
// The Installing event is sent just after the component 
// MSDE is copied to the support directory.
//---------------------------------------------------------------------------
export prototype MSDE_Installed();
function MSDE_Installed()   
  number Result;
  string ServicePathname;
  string SQLPath;
  number Type;
  number Size;   
  string Program;
  string CmdLine;  
  number Options;
  string PathForDBFiles;
begin 
  // Before launching the MSDE install, verify if it can be found on
  // the target. The global boolean is set accordingly and used
  // when the database is created to optionnaly preserve the database
  // if it exist.   
  MSDEWasFoundOnTarget = FALSE;
  RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);  
  Result = RegDBGetKeyValueEx("SOFTWARE\\Microsoft\\Microsoft SQL Server\\Dtc\\Setup", 
                              "SQLPath", Type, SQLPath, Size);  
  if (Result = 0) then
    ServicePathname = SQLPath ^ "Binn\\sqlservr.exe";  
    if (Is(FILE_EXISTS, ServicePathname)) then 
      MSDEWasFoundOnTarget = TRUE;
    endif; 
  endif;       
  
  // If MSDE was removed from the machine and we are reinstalling,
  // we will run into problems if there are still database files
  // in the data directory. We must erase them first.
  if (!MSDEWasFoundOnTarget) then
    PathForDBFiles = TARGETDIR ^ SubPathForDBFiles;
    DeleteDir(PathForDBFiles, ALLCONTENTS);  
  endif; 

  Program = SUPPORTDIR ^ "MSDE2KSP3\\setup.exe";   
  Options = LAAW_OPTION_WAIT | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_SET_BATCH_INSTALL;
  if (MSDEWasFoundOnTarget) then
    CmdLine = "/upgradesp SQLRUN INSTANCENAME=DTC UPGRADEUSER=sa UPGRADEPWD=dtc01 SECURITYMODE=SQL REBOOT=ReallySuppress DATADIR=\"" + TARGETDIR + "\\MSDE\\\" TARGETDIR=\"" + TARGETDIR + "\\MSDE\\\"";
  else
     CmdLine = "INSTANCENAME=DTC SAPWD=dtc01 SECURITYMODE=SQL REBOOT=ReallySuppress DATADIR=\"" + TARGETDIR + "\\MSDE\\\" TARGETDIR=\"" + TARGETDIR + "\\MSDE\\\"";
  endif; 
  Result = LaunchAppAndWait(Program, CmdLine, Options);
  if (Result != 0) then  
    MessageBox(MSDEInstallError, SEVERE);
    CriticalErrorOccured = TRUE;
  elseif (LAAW_PARAMETERS.nLaunchResult = MSDE2K_OBJ_ERROR_SUCCESS_REBOOT_REQUIRED || 
	      LAAW_PARAMETERS.nLaunchResult = MSDE2K_OBJ_ERROR_SUCCESS_REBOOT_INITIATED) then
    BATCH_INSTALL = TRUE;
  endif;
end;  

export prototype ReplicationServer_UnInstalling();
function ReplicationServer_UnInstalling()
begin 
  StopService("Dtc_ReplServer");                               
  
  // run unlodctr command (unregister counters)                
  LaunchAppAndWait("unlodctr", SUPPORTDIR ^ "counters.ini", LAAW_OPTION_WAIT);
end;
 
