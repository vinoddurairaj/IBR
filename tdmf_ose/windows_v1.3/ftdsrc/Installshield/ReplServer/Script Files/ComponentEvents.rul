//---------------------------------------------------------------------------
// The Installing event is sent after the component Replication Server
// is installed.
//---------------------------------------------------------------------------
 
export prototype ReplicationServer_Installed();

function ReplicationServer_Installed()
  string RegKey; 
  string WbemAdapFileTime[9];   
  string InfPathname;
  string HardwareId;
  number Result;
  string ResultStr;
  number NewChunkSize;
  number NewBabSize;
  string TmpValue;
begin   
  // Set Registry Entries
  RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
  RegKey = "SOFTWARE\\Softek\\Dtc\\CurrentVersion";
  Disable(LOGGING); // because these are shared 
  if (RegDBKeyExist(RegKey) < 0) then
    RegDBCreateKeyEx(RegKey, "");
  endif;      
  Enable(LOGGING);   
  RegDBSetKeyValueEx(RegKey, "InstallPath",       REGDB_STRING, TARGETDIR, -1);
  RegDBSetKeyValueEx(RegKey, "max_dev",           REGDB_NUMBER, "32", -1);    // dword:00000020
  RegDBSetKeyValueEx(RegKey, "max_lg",            REGDB_NUMBER, "1000", -1);  // dword:000003e8
  RegDBSetKeyValueEx(RegKey, "port",              REGDB_NUMBER, ReplicationServerPortNb, -1); 
  RegDBSetKeyValueEx(RegKey, "tcp_window_size",   REGDB_NUMBER, "262144", -1);// dword:00040000
  RegDBSetKeyValueEx(RegKey, "PerfUploadPeriod",  REGDB_NUMBER, "100", -1);   // dword:00000064
  RegDBSetKeyValueEx(RegKey, "DtcIP",             REGDB_STRING, DtcIPAddress, -1);
  RegDBSetKeyValueEx(RegKey, "license",           REGDB_STRING, RegistrationKey, -1);
  RegDBSetKeyValueEx(RegKey, "MonitorUpdateInterval", REGDB_NUMBER, "10000", -1);// dword:002710
  RegDBSetKeyValueEx(RegKey, "MonColumnZero",     REGDB_NUMBER, "80", -1); // dword:00000050
  RegDBSetKeyValueEx(RegKey, "MonColumnOne",      REGDB_NUMBER, "80", -1); // dword:00000050
  RegDBSetKeyValueEx(RegKey, "MonColumnTwo",      REGDB_NUMBER, "80", -1); // dword:00000050
  RegDBSetKeyValueEx(RegKey, "MonColumnThree",    REGDB_NUMBER, "80", -1); // dword:00000050
  RegDBSetKeyValueEx(RegKey, "MonColumnFour",     REGDB_NUMBER, "80", -1); // dword:00000050
  RegDBSetKeyValueEx(RegKey, "MonColumnFive",     REGDB_NUMBER, "80", -1); // dword:00000050
  RegDBSetKeyValueEx(RegKey, "MonColumnSix",      REGDB_NUMBER, "80", -1); // dword:00000050
  RegDBSetKeyValueEx(RegKey, "MonColumnSeven",    REGDB_NUMBER, "80", -1); // dword:00000050
  RegDBSetKeyValueEx(RegKey, "MonColumnEight",    REGDB_NUMBER, "80", -1); // dword:00000050
  
  // Install TdmfBlock.sys as a device driver
  RegKey = "SYSTEM\\CurrentControlSet\\Services\\DtcBlock";
  RegDBSetKeyValueEx(RegKey, "Tag",               REGDB_NUMBER, "4", -1); // dword:00000004
  RegDBSetKeyValueEx(RegKey, "DisplayName",       REGDB_STRING, DriverDisplayName, -1);
  RegDBSetKeyValueEx(RegKey, "ErrorControl",      REGDB_NUMBER, "1", -1); // dword:00000001
  RegDBSetKeyValueEx(RegKey, "Type",              REGDB_NUMBER, "1", -1); // dword:00000001
  RegDBSetKeyValueEx(RegKey, "Group",             REGDB_STRING, "Filter", -1);
  RegDBSetKeyValueEx(RegKey, "EventMessageFile", REGDB_STRING, WINSYSDIR ^ "dtcLogMsg.dll", -1);
  RegDBSetKeyValueEx(RegKey, "TypesSupported",   REGDB_NUMBER, "7", -1); // dword:00000007 
  if (BABSize == "0") then
    RegDBSetKeyValueEx(RegKey, "Start",             REGDB_NUMBER, "4", -1); // dword:00000004
  else
    RegDBSetKeyValueEx(RegKey, "Start",             REGDB_NUMBER, "0", -1); // dword:00000000
  endif;
  RegKey = "SYSTEM\\CurrentControlSet\\Services\\DtcBlock\\Parameters";
  RegDBSetKeyValueEx(RegKey, "MAXMEM",            REGDB_NUMBER, "0", -1); // dword:00000000
  RegDBSetKeyValueEx(RegKey, "BREAKONENTRY",      REGDB_NUMBER, "0", -1); // dword:00000000
  RegDBSetKeyValueEx(RegKey, "DEBUGLEVEL",        REGDB_NUMBER, "0", -1); // dword:00000000
  NewChunkSize = 4 * 1048576; // Bytes        
  StrToNum(NewBabSize, BABSize);
  NewBabSize = NewBabSize/(NewChunkSize/1048576); // MB 
  NumToStr(TmpValue, NewBabSize);
  RegDBSetKeyValueEx(RegKey, "NUM_CHUNKS",        REGDB_NUMBER, TmpValue, -1);
  NumToStr(TmpValue, NewChunkSize);
  RegDBSetKeyValueEx(RegKey, "CHUNK_SIZE",        REGDB_NUMBER, TmpValue, -1); // dword:00100000
   
  if (BABSize != "0") then
    BATCH_INSTALL = TRUE; // This will ask to reboot which is required for the driver
  endif;
   
  // Register Tdmf_ReplServer to the Windows Event Viewer
  RegKey = "SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\" + EventLogSourceName;
  if (RegDBKeyExist(RegKey) < 0) then
    RegDBCreateKeyEx(RegKey, "");
  endif;      
  RegDBSetKeyValueEx(RegKey, "EventMessageFile", REGDB_STRING, WINSYSDIR ^ "DtcLogMsg.dll", -1);
  RegDBSetKeyValueEx(RegKey, "TypesSupported",   REGDB_NUMBER, "7", -1); // dword:00000007 
  
  RegKey = "SYSTEM\\CurrentControlSet\\Services\\Eventlog\\System\\DTCBLOCK";   
  RegDBSetKeyValueEx(RegKey, "EventMessageFile", REGDB_STRING, WINSYSDIR ^ "DtcLogMsg.dll", -1);
  RegDBSetKeyValueEx(RegKey, "TypesSupported",   REGDB_NUMBER, "7", -1); // dword:00000007 

  // Register TdmfPerf.dll to the Windows Performance Monitor
  RegKey = "SYSTEM\\CurrentControlSet\\Services\\Dtc_ReplServer\\Performance";
  if (RegDBKeyExist(RegKey) < 0) then
    RegDBCreateKeyEx(RegKey, "");
  endif;      
  RegDBSetKeyValueEx(RegKey, "LIBRARY",       REGDB_STRING, TARGETDIR ^ "DtcPerf.dll", -1);
  RegDBSetKeyValueEx(RegKey, "COLLECT",       REGDB_STRING, "PerfCollect", -1);
  RegDBSetKeyValueEx(RegKey, "CLOSE",         REGDB_STRING, "PerfClose", -1);
  RegDBSetKeyValueEx(RegKey, "OPEN",          REGDB_STRING, "PerfOpen", -1);
  // run lodctr command (register counters)                
  LaunchAppAndWait("lodctr", SUPPORTDIR ^ "counters.ini", LAAW_OPTION_WAIT);
  
  // Create Service and start it only if there will be no reboot                              
  SdShowMsg (ReplCreatingServiceMsgStr, TRUE);
  Result = ServiceAddService(ReplServiceServiceName,            //ServiceName
                             ReplServiceDisplayNameStr,         //ServiceDisplayName
                             ReplServiceDescStr,                //ServiceDescription
                             TARGETDIR ^ "Dtc_ReplServer.exe", //ServicePathFile
                             !BATCH_INSTALL,                    //bStartService
                             "");                               //szStartServiceArgs    
  if (Result < ISERR_SUCCESS) then 
    MessageBox(ReplServiceErrorMsgStr, SEVERE);
    CriticalErrorOccured = TRUE;
    LogWriteCustomString("ReplServiceError", ReplServiceErrorMsgStr);
  endif;                           
                             
  CreateDir(TARGETDIR ^ "pstore");
  CreateDir(TARGETDIR ^ "journal");    
                    
  SdShowMsg ("", FALSE);
  
end;


export prototype ReplicationServer_UnInstalling();
function ReplicationServer_UnInstalling()
begin 
  StopService("Dtc_ReplServer");                               
  
  // run unlodctr command (unregister counters)                
  LaunchAppAndWait("unlodctr", SUPPORTDIR ^ "counters.ini", LAAW_OPTION_WAIT);
end;
 
